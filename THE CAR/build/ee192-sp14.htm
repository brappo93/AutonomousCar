<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\ee192-sp14.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\ee192-sp14.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050041: Last Updated: Fri Apr 08 17:04:36 2016
<BR><P>
<H3>Maximum Stack Usage =        464 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__sti___8_main_cpp_50cc0329 &rArr; AjK::MODSERIAL::MODSERIAL(PinName, PinName, const char*) &rArr; mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[14]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">NMI_Handler</a><BR>
 <LI><a href="#[15]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">HardFault_Handler</a><BR>
 <LI><a href="#[28]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">ADC0_IRQHandler</a><BR>
 <LI><a href="#[270]">us_ticker_set_interrupt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[261]">us_ticker_irq_handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[77]">&lang;Func1&rang;</a> from SerialBase.o(i.<Func1>) referenced from SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
 <LI><a href="#[28]">ADC0_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[29]">CMP0_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[32]">DAC0_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[19]">DMA0_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[1a]">DMA1_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[1b]">DMA2_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[1c]">DMA3_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[1e]">FTFA_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[15]">HardFault_Handler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[21]">I2C0_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[22]">I2C1_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[20]">LLW_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[35]">LPTimer_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[1f]">LVD_LVW_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[34]">MCG_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[14]">NMI_Handler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[2f]">PIT_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[37]">PORTA_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[38]">PORTD_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[17]">PendSV_Handler</a> from hal_cm0.o(.emb_text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[2d]">RTC_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[2e]">RTC_Seconds_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[1d]">Reserved20_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[30]">Reserved39_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[36]">Reserved45_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[13]">Reset_Handler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[23]">SPI0_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[24]">SPI1_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from hal_cm0.o(.emb_text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[18]">SysTick_Handler</a> from hal_cm0.o(.emb_text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[3b]">SystemInit</a> from system_MKL25Z4.o(i.SystemInit) referenced from startup_MKL25Z4.o(.text)
 <LI><a href="#[2a]">TPM0_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[2b]">TPM1_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[2c]">TPM2_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[33]">TSI0_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[25]">UART0_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[26]">UART1_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[27]">UART2_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[31]">USB0_IRQHandler</a> from startup_MKL25Z4.o(.text) referenced from startup_MKL25Z4.o(RESET)
 <LI><a href="#[3e]">cam_data_thread(const void*)</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[7a]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[3d]">speed_isr()</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[75]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[6d]">AjK::MODSERIAL_callback::MODSERIAL_callback()</a> from modserial.o(i._ZN3AjK18MODSERIAL_callbackC1Ev) referenced from modserial.o(.text)
 <LI><a href="#[88]">AjK::MODSERIAL::_putc(int)</a> from modserial.o(i._ZN3AjK9MODSERIAL5_putcEi) referenced from modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
 <LI><a href="#[11]">AjK::MODSERIAL::isr_rx()</a> from isr_rx.o(.text) referenced 2 times from init.o(.data)
 <LI><a href="#[12]">AjK::MODSERIAL::isr_tx()</a> from init.o(i._ZN3AjK9MODSERIAL6isr_txEv) referenced 2 times from init.o(.data)
 <LI><a href="#[87]">AjK::MODSERIAL::~MODSERIAL__deallocating()</a> from modserial.o(.text) referenced from modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
 <LI><a href="#[40]">AjK::MODSERIAL::~MODSERIAL()</a> from modserial.o(.text) referenced from modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
 <LI><a href="#[40]">AjK::MODSERIAL::~MODSERIAL()</a> from modserial.o(.text) referenced from main.o(.text)
 <LI><a href="#[8c]">mbed::FileHandle::flen()</a> from retarget.o(i._ZN4mbed10FileHandle4flenEv) referenced from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[8c]">mbed::FileHandle::flen()</a> from retarget.o(i._ZN4mbed10FileHandle4flenEv) referenced from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[8d]">mbed::FileHandle::~FileHandle__sub_object()</a> from retarget.o(i._ZN4mbed10FileHandleD2Ev) referenced from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[78]">mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</a> from SerialBase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq) referenced from SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
 <LI><a href="#[79]">mbed::InterruptIn::_irq_handler(unsigned, gpio_irq_event)</a> from InterruptIn.o(i._ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event) referenced from InterruptIn.o(i._ZN4mbed11InterruptInC1E7PinName)
 <LI><a href="#[3f]">mbed::InterruptIn::~InterruptIn()</a> from InterruptIn.o(i._ZN4mbed11InterruptInD1Ev) referenced from InterruptIn.o(.constdata__ZTVN4mbed11InterruptInE)
 <LI><a href="#[3f]">mbed::InterruptIn::~InterruptIn()</a> from InterruptIn.o(i._ZN4mbed11InterruptInD1Ev) referenced from main.o(.text)
 <LI><a href="#[81]">void mbed::FunctionPointer::membercaller&lang;AjK::MODSERIAL&rang;(void*, char*)</a> from init.o(t._ZN4mbed15FunctionPointer12membercallerIN3AjK9MODSERIALEEEvPvPc) referenced from init.o(t._ZN4mbed10SerialBase6attachIN3AjK9MODSERIALEEEvPT_MS4_FvvENS0_7IrqTypeE)
 <LI><a href="#[8e]">mbed::Serial::_putc(int)</a> from Serial.o(i._ZN4mbed6Serial5_putcEi) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[86]">mbed::Stream::flen()</a> from Stream.o(i._ZN4mbed6Stream4flenEv) referenced from modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
 <LI><a href="#[86]">mbed::Stream::flen()</a> from Stream.o(i._ZN4mbed6Stream4flenEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[86]">mbed::Stream::flen()</a> from Stream.o(i._ZN4mbed6Stream4flenEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[83]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
 <LI><a href="#[83]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[83]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[85]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
 <LI><a href="#[85]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[85]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[82]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
 <LI><a href="#[82]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[82]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[84]">mbed::Stream::isatty()</a> from Stream.o(i._ZN4mbed6Stream6isattyEv) referenced from modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
 <LI><a href="#[84]">mbed::Stream::isatty()</a> from Stream.o(i._ZN4mbed6Stream6isattyEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[84]">mbed::Stream::isatty()</a> from Stream.o(i._ZN4mbed6Stream6isattyEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[8f]">mbed::Stream::~Stream__sub_object()</a> from Stream.o(i._ZN4mbed6StreamD2Ev) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[90]">mbed::FileBase::~FileBase()</a> from FileBase.o(i._ZN4mbed8FileBaseD1Ev) referenced from FileBase.o(.constdata__ZTVN4mbed8FileBaseE)
 <LI><a href="#[91]">mbed::FileLike::~FileLike__sub_object()</a> from FileLike.o(i._ZN4mbed8FileLikeD2Ev) referenced from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[93]">rtos::Thread::~Thread__deallocating()</a> from thread.o(.text) referenced from thread.o(.constdata__ZTVN4rtos6ThreadE)
 <LI><a href="#[92]">rtos::Thread::~Thread()</a> from thread.o(.text) referenced from thread.o(.constdata__ZTVN4rtos6ThreadE)
 <LI><a href="#[94]">telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::get_data_type()</a> from main.o(t._ZN9telemetry12NumericArrayItLj128EE13get_data_typeEv) referenced from main.o(.constdata__ZTVN9telemetry12NumericArrayItLj128EEE)
 <LI><a href="#[98]">telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::write_payload(telemetry::TransmitPacket&)</a> from main.o(t._ZN9telemetry12NumericArrayItLj128EE13write_payloadERNS_14TransmitPacketE) referenced from main.o(.constdata__ZTVN9telemetry12NumericArrayItLj128EEE)
 <LI><a href="#[99]">telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::set_from_packet(telemetry::ReceivePacketBuffer&)</a> from main.o(t._ZN9telemetry12NumericArrayItLj128EE15set_from_packetERNS_19ReceivePacketBufferE) referenced from main.o(.constdata__ZTVN9telemetry12NumericArrayItLj128EEE)
 <LI><a href="#[96]">telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::write_header_kvrs(telemetry::TransmitPacket&)</a> from main.o(t._ZN9telemetry12NumericArrayItLj128EE17write_header_kvrsERNS_14TransmitPacketE) referenced from main.o(.constdata__ZTVN9telemetry12NumericArrayItLj128EEE)
 <LI><a href="#[97]">telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::get_payload_length()</a> from main.o(t._ZN9telemetry12NumericArrayItLj128EE18get_payload_lengthEv) referenced from main.o(.constdata__ZTVN9telemetry12NumericArrayItLj128EEE)
 <LI><a href="#[95]">telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::get_header_kvrs_length()</a> from main.o(t._ZN9telemetry12NumericArrayItLj128EE22get_header_kvrs_lengthEv) referenced from main.o(.constdata__ZTVN9telemetry12NumericArrayItLj128EEE)
 <LI><a href="#[43]">telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::~NumericArray()</a> from main.o(i._ZN9telemetry12NumericArrayItLj128EED1Ev) referenced from main.o(.constdata__ZTVN9telemetry12NumericArrayItLj128EEE)
 <LI><a href="#[43]">telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::~NumericArray()</a> from main.o(i._ZN9telemetry12NumericArrayItLj128EED1Ev) referenced from main.o(.text)
 <LI><a href="#[9e]">telemetry::FixedLengthTransmitPacket::write_float(float)</a> from packet.o(.text) referenced from packet.o(.constdata__ZTVN9telemetry25FixedLengthTransmitPacketE)
 <LI><a href="#[9b]">telemetry::FixedLengthTransmitPacket::write_uint8(unsigned char)</a> from packet.o(.text) referenced from packet.o(.constdata__ZTVN9telemetry25FixedLengthTransmitPacketE)
 <LI><a href="#[9c]">telemetry::FixedLengthTransmitPacket::write_uint16(unsigned short)</a> from packet.o(.text) referenced from packet.o(.constdata__ZTVN9telemetry25FixedLengthTransmitPacketE)
 <LI><a href="#[9d]">telemetry::FixedLengthTransmitPacket::write_uint32(unsigned)</a> from packet.o(.text) referenced from packet.o(.constdata__ZTVN9telemetry25FixedLengthTransmitPacketE)
 <LI><a href="#[9f]">telemetry::FixedLengthTransmitPacket::finish()</a> from packet.o(.text) referenced from packet.o(.constdata__ZTVN9telemetry25FixedLengthTransmitPacketE)
 <LI><a href="#[9a]">telemetry::FixedLengthTransmitPacket::~FixedLengthTransmitPacket()</a> from packet.o(i._ZN9telemetry25FixedLengthTransmitPacketD1Ev) referenced from packet.o(.constdata__ZTVN9telemetry25FixedLengthTransmitPacketE)
 <LI><a href="#[a1]">telemetry::Data::write_header_kvrs(telemetry::TransmitPacket&)</a> from telemetry-data.o(.text) referenced from telemetry-data.o(.constdata__ZTVN9telemetry4DataE)
 <LI><a href="#[a0]">telemetry::Data::get_header_kvrs_length()</a> from telemetry-data.o(.text) referenced from telemetry-data.o(.constdata__ZTVN9telemetry4DataE)
 <LI><a href="#[a6]">telemetry::MbedHal::get_time_ms()</a> from telemetry-mbed-hal.o(.text) referenced from telemetry-mbed-hal.o(.constdata__ZTVN9telemetry7MbedHalE)
 <LI><a href="#[a4]">telemetry::MbedHal::receive_byte()</a> from telemetry-mbed-hal.o(.text) referenced from telemetry-mbed-hal.o(.constdata__ZTVN9telemetry7MbedHalE)
 <LI><a href="#[a3]">telemetry::MbedHal::rx_available()</a> from telemetry-mbed-hal.o(.text) referenced from telemetry-mbed-hal.o(.constdata__ZTVN9telemetry7MbedHalE)
 <LI><a href="#[a2]">telemetry::MbedHal::transmit_byte(unsigned char)</a> from telemetry-mbed-hal.o(.text) referenced from telemetry-mbed-hal.o(.constdata__ZTVN9telemetry7MbedHalE)
 <LI><a href="#[a5]">telemetry::MbedHal::do_error(const char*)</a> from telemetry-mbed-hal.o(.text) referenced from telemetry-mbed-hal.o(.constdata__ZTVN9telemetry7MbedHalE)
 <LI><a href="#[41]">telemetry::MbedHal::~MbedHal()</a> from main.o(i._ZN9telemetry7MbedHalD1Ev) referenced from telemetry-mbed-hal.o(.constdata__ZTVN9telemetry7MbedHalE)
 <LI><a href="#[41]">telemetry::MbedHal::~MbedHal()</a> from main.o(i._ZN9telemetry7MbedHalD1Ev) referenced from main.o(.text)
 <LI><a href="#[a7]">telemetry::Numeric&lang;float&rang;::get_data_type()</a> from main.o(t._ZN9telemetry7NumericIfE13get_data_typeEv) referenced from main.o(.constdata__ZTVN9telemetry7NumericIfEE)
 <LI><a href="#[ab]">telemetry::Numeric&lang;float&rang;::write_payload(telemetry::TransmitPacket&)</a> from main.o(t._ZN9telemetry7NumericIfE13write_payloadERNS_14TransmitPacketE) referenced from main.o(.constdata__ZTVN9telemetry7NumericIfEE)
 <LI><a href="#[ac]">telemetry::Numeric&lang;float&rang;::set_from_packet(telemetry::ReceivePacketBuffer&)</a> from main.o(t._ZN9telemetry7NumericIfE15set_from_packetERNS_19ReceivePacketBufferE) referenced from main.o(.constdata__ZTVN9telemetry7NumericIfEE)
 <LI><a href="#[a9]">telemetry::Numeric&lang;float&rang;::write_header_kvrs(telemetry::TransmitPacket&)</a> from main.o(t._ZN9telemetry7NumericIfE17write_header_kvrsERNS_14TransmitPacketE) referenced from main.o(.constdata__ZTVN9telemetry7NumericIfEE)
 <LI><a href="#[aa]">telemetry::Numeric&lang;float&rang;::get_payload_length()</a> from main.o(t._ZN9telemetry7NumericIfE18get_payload_lengthEv) referenced from main.o(.constdata__ZTVN9telemetry7NumericIfEE)
 <LI><a href="#[a8]">telemetry::Numeric&lang;float&rang;::get_header_kvrs_length()</a> from main.o(t._ZN9telemetry7NumericIfE22get_header_kvrs_lengthEv) referenced from main.o(.constdata__ZTVN9telemetry7NumericIfEE)
 <LI><a href="#[44]">telemetry::Numeric&lang;float&rang;::~Numeric()</a> from main.o(i._ZN9telemetry7NumericIfED1Ev) referenced from main.o(.constdata__ZTVN9telemetry7NumericIfEE)
 <LI><a href="#[44]">telemetry::Numeric&lang;float&rang;::~Numeric()</a> from main.o(i._ZN9telemetry7NumericIfED1Ev) referenced from main.o(.text)
 <LI><a href="#[ad]">telemetry::Numeric&lang;unsigned&rang;::get_data_type()</a> from main.o(t._ZN9telemetry7NumericIjE13get_data_typeEv) referenced from main.o(.constdata__ZTVN9telemetry7NumericIjEE)
 <LI><a href="#[b1]">telemetry::Numeric&lang;unsigned&rang;::write_payload(telemetry::TransmitPacket&)</a> from main.o(t._ZN9telemetry7NumericIjE13write_payloadERNS_14TransmitPacketE) referenced from main.o(.constdata__ZTVN9telemetry7NumericIjEE)
 <LI><a href="#[b2]">telemetry::Numeric&lang;unsigned&rang;::set_from_packet(telemetry::ReceivePacketBuffer&)</a> from main.o(t._ZN9telemetry7NumericIjE15set_from_packetERNS_19ReceivePacketBufferE) referenced from main.o(.constdata__ZTVN9telemetry7NumericIjEE)
 <LI><a href="#[af]">telemetry::Numeric&lang;unsigned&rang;::write_header_kvrs(telemetry::TransmitPacket&)</a> from main.o(t._ZN9telemetry7NumericIjE17write_header_kvrsERNS_14TransmitPacketE) referenced from main.o(.constdata__ZTVN9telemetry7NumericIjEE)
 <LI><a href="#[b0]">telemetry::Numeric&lang;unsigned&rang;::get_payload_length()</a> from main.o(t._ZN9telemetry7NumericIjE18get_payload_lengthEv) referenced from main.o(.constdata__ZTVN9telemetry7NumericIjEE)
 <LI><a href="#[ae]">telemetry::Numeric&lang;unsigned&rang;::get_header_kvrs_length()</a> from main.o(t._ZN9telemetry7NumericIjE22get_header_kvrs_lengthEv) referenced from main.o(.constdata__ZTVN9telemetry7NumericIjEE)
 <LI><a href="#[42]">telemetry::Numeric&lang;unsigned&rang;::~Numeric()</a> from main.o(i._ZN9telemetry7NumericIjED1Ev) referenced from main.o(.constdata__ZTVN9telemetry7NumericIjEE)
 <LI><a href="#[42]">telemetry::Numeric&lang;unsigned&rang;::~Numeric()</a> from main.o(i._ZN9telemetry7NumericIjED1Ev) referenced from main.o(.text)
 <LI><a href="#[8a]">thunk{-4} to AjK::MODSERIAL::~MODSERIAL__deallocating()</a> from modserial.o(.text) referenced from modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
 <LI><a href="#[89]">thunk{-4} to AjK::MODSERIAL::~MODSERIAL()</a> from modserial.o(.text) referenced from modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
 <LI><a href="#[8b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[8b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[8b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[8b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 5 times from main.o(.constdata__ZTVN9telemetry12HalInterfaceE)
 <LI><a href="#[8b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 5 times from packet.o(.constdata__ZTVN9telemetry14TransmitPacketE)
 <LI><a href="#[8b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from telemetry-data.o(.constdata__ZTVN9telemetry4DataE)
 <LI><a href="#[b4]">__main</a> from __main.o(!!!main) referenced from startup_MKL25Z4.o(.text)
 <LI><a href="#[b3]">__sti___8_main_cpp_50cc0329</a> from main.o(.text) referenced from main.o(.init_array)
 <LI><a href="#[74]">_fputc$unlocked</a> from fputc.o(i.fputc) referenced from _printf_char_file_locked.o(.text)
 <LI><a href="#[76]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[71]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[70]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[72]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[6f]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[6e]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[7b]">gpio_irqA</a> from gpio_irq_api.o(i.gpio_irqA) referenced from gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[7c]">gpio_irqD</a> from gpio_irq_api.o(i.gpio_irqD) referenced from gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[73]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[7d]">lptmr_isr</a> from us_ticker.o(i.lptmr_isr) referenced from us_ticker.o(i.lptmr_init)
 <LI><a href="#[10]">main</a> from retarget.o(i.$Sub$$main) referenced 2 times from rtx_conf_cm.o(.data)
 <LI><a href="#[47]">osThreadExit</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[f]">osTimerThread</a> from rt_cmsis.o(.text) referenced 2 times from rtx_conf_cm.o(.data)
 <LI><a href="#[6a]">os_idle_demon</a> from rtx_conf_cm.o(.text) referenced from rt_task.o(.text)
 <LI><a href="#[39]">rt_alloc_box</a> from rt_membox.o(.text) referenced from hal_cm0.o(.emb_text)
 <LI><a href="#[3a]">rt_free_box</a> from rt_membox.o(.text) referenced from hal_cm0.o(.emb_text)
 <LI><a href="#[6c]">rt_mut_release</a> from rt_mutex.o(.text) referenced from rtx_conf_cm.o(.text)
 <LI><a href="#[6b]">rt_mut_wait</a> from rt_mutex.o(.text) referenced from rtx_conf_cm.o(.text)
 <LI><a href="#[4f]">svcDelay</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[48]">svcKernelInitialize</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[4a]">svcKernelRunning</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[49]">svcKernelStart</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[67]">svcMailCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[65]">svcMessageCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[55]">svcMessageGet</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[66]">svcMessagePut</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[5a]">svcMutexCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[5d]">svcMutexDelete</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[5c]">svcMutexRelease</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[5b]">svcMutexWait</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[62]">svcPoolCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[5e]">svcSemaphoreCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[61]">svcSemaphoreDelete</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[60]">svcSemaphoreRelease</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[5f]">svcSemaphoreWait</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[57]">svcSignalClear</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[58]">svcSignalGet</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[56]">svcSignalSet</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[59]">svcSignalWait</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[4b]">svcThreadCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[45]">svcThreadGetId</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[4e]">svcThreadGetPriority</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[4d]">svcThreadSetPriority</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[46]">svcThreadTerminate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[4c]">svcThreadYield</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[54]">svcTimerCall</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[50]">svcTimerCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[53]">svcTimerDelete</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[51]">svcTimerStart</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[52]">svcTimerStop</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[68]">sysMailAlloc</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[69]">sysMailFree</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[63]">sysPoolAlloc</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[64]">sysPoolFree</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[7e]">uart0_irq</a> from serial_api.o(i.uart0_irq) referenced from serial_api.o(i.serial_irq_set)
 <LI><a href="#[7f]">uart1_irq</a> from serial_api.o(i.uart1_irq) referenced from serial_api.o(i.serial_irq_set)
 <LI><a href="#[80]">uart2_irq</a> from serial_api.o(i.uart2_irq) referenced from serial_api.o(i.serial_irq_set)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b4]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = __main &rArr; __rt_entry &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; sysThreadError &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bc]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[be]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[284]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[285]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[286]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1d9]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[bf]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[c0]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[c2]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[c4]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[d6]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[287]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[288]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[289]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[28a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[28b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[28c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[28d]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[28e]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[28f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[290]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[291]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[292]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[293]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[294]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[295]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[296]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[297]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[298]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[299]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[29a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[29b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ce]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_1 &rArr; __cxa_finalize &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[29c]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[29d]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text), UNUSED)

<P><STRONG><a name="[1a9]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[29e]"></a>os_set_env</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text), UNUSED)

<P><STRONG><a name="[19d]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calloc_box
</UL>

<P><STRONG><a name="[29f]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text), UNUSED)

<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SVC_Handler &rArr; rt_stk_check &rArr; os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
</UL>

<P><STRONG><a name="[bd]"></a>__rt_entry</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_conf_cm.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = __rt_entry &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; sysThreadError &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_main_stack
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1ec]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2a0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[2a1]"></a>unsigned char telemetry::protocol::numeric_subtype&lang;unsigned char&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocol.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[273]"></a>unsigned char telemetry::protocol::numeric_subtype&lang;unsigned short&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::write_header_kvrs(telemetry::TransmitPacket&)
</UL>

<P><STRONG><a name="[279]"></a>unsigned char telemetry::protocol::numeric_subtype&lang;unsigned&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;unsigned&rang;::write_header_kvrs(telemetry::TransmitPacket&)
</UL>

<P><STRONG><a name="[2a3]"></a>unsigned char telemetry::protocol::numeric_subtype&lang;signed char&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocol.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>unsigned char telemetry::protocol::numeric_subtype&lang;short&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocol.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>unsigned char telemetry::protocol::numeric_subtype&lang;int&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocol.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>unsigned char telemetry::protocol::numeric_subtype&lang;float&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;float&rang;::write_header_kvrs(telemetry::TransmitPacket&)
</UL>

<P><STRONG><a name="[2a6]"></a>unsigned char telemetry::protocol::numeric_subtype&lang;double&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocol.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>telemetry::Data::get_header_kvrs_length()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, telemetry-data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = telemetry::Data::get_header_kvrs_length() &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;unsigned&rang;::get_header_kvrs_length()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;float&rang;::get_header_kvrs_length()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::get_header_kvrs_length()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> telemetry-data.o(.constdata__ZTVN9telemetry4DataE)
</UL>
<P><STRONG><a name="[dc]"></a>telemetry::packet_write_string(telemetry::TransmitPacket&, const char*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, telemetry-data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = telemetry::packet_write_string(telemetry::TransmitPacket&, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Data::write_header_kvrs(telemetry::TransmitPacket&)
</UL>

<P><STRONG><a name="[a1]"></a>telemetry::Data::write_header_kvrs(telemetry::TransmitPacket&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, telemetry-data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = telemetry::Data::write_header_kvrs(telemetry::TransmitPacket&) &rArr; telemetry::packet_write_string(telemetry::TransmitPacket&, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::packet_write_string(telemetry::TransmitPacket&, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;unsigned&rang;::write_header_kvrs(telemetry::TransmitPacket&)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;float&rang;::write_header_kvrs(telemetry::TransmitPacket&)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::write_header_kvrs(telemetry::TransmitPacket&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> telemetry-data.o(.constdata__ZTVN9telemetry4DataE)
</UL>
<P><STRONG><a name="[13]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[2a7]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>FTFA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>LLW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>LPTimer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>Reserved39_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>Reserved45_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TPM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TPM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TPM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_MKL25Z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(RESET)
</UL>
<P><STRONG><a name="[2a8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[ef]"></a>find_line(unsigned short*)</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = find_line(unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_data_thread(const void*)
</UL>

<P><STRONG><a name="[dd]"></a>dummy_read()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = dummy_read() &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_data_thread(const void*)
</UL>

<P><STRONG><a name="[e0]"></a>set_steer(int)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = set_steer(int) &rArr; mbed::Timer::read() &rArr; mbed::Timer::read_us() &rArr; mbed::Timer::slicetime() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::pulsewidth_us(int)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::stop()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setProcessValue(float)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setInterval(float)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_data_thread(const void*)
</UL>

<P><STRONG><a name="[3e]"></a>cam_data_thread(const void*)</STRONG> (Thumb, 260 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = cam_data_thread(const void*) &rArr; set_steer(int) &rArr; mbed::Timer::read() &rArr; mbed::Timer::read_us() &rArr; mbed::Timer::slicetime() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_read_u16
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::wait(unsigned)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steer(int)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dummy_read()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_line(unsigned short*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>camera_setup()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = camera_setup() &rArr; mbed::DigitalOut::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[3d]"></a>speed_isr()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[f3]"></a>set_speed(float)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = set_speed(float) &rArr; pwmout_write &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_setup()
</UL>

<P><STRONG><a name="[fa]"></a>drive_setup()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = drive_setup() &rArr; set_speed(float) &rArr; pwmout_write &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::fall(void(*)())
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[fd]"></a>steer_setup()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = steer_setup() &rArr; pwmout_period_ms &rArr; pwmout_period_us &rArr; pwmout_read &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::pulsewidth_us(int)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_ms
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setMode(int)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setBias(float)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setOutputLimits(float, float)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setInputLimits(float, float)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setSetPoint(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[104]"></a>estimate_speed()</STRONG> (Thumb, 568 bytes, Stack size 72 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = estimate_speed() &rArr; mbed::Timer::read() &rArr; mbed::Timer::read_us() &rArr; mbed::Timer::slicetime() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;float&rang;::operator =(float)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::stop()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed(float)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[10d]"></a>flash_led()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = flash_led() &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[10f]"></a>$Super$$main</STRONG> (Thumb, 232 bytes, Stack size 192 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; rtos::Thread::Thread(void(*)(const void*), void*, osPriority, unsigned, unsigned char*) &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; sysThreadError &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;float&rang;::operator =(float)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::do_io()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::mark_data_updated(unsigned)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::transmit_header()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread(void(*)(const void*), void*, osPriority, unsigned, unsigned char*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::wait(unsigned)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::set_priority(osPriority)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_led()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steer_setup()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_setup()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_setup()
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>telemetry::ReceivePacketBuffer::new_packet()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, packet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::ReceivePacketBuffer::ReceivePacketBuffer(telemetry::HalInterface&)
</UL>

<P><STRONG><a name="[124]"></a>telemetry::ReceivePacketBuffer::ReceivePacketBuffer(telemetry::HalInterface&)</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = telemetry::ReceivePacketBuffer::ReceivePacketBuffer(telemetry::HalInterface&)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::ReceivePacketBuffer::new_packet()
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::Telemetry(telemetry::HalInterface&)
</UL>

<P><STRONG><a name="[2a9]"></a>telemetry::ReceivePacketBuffer::ReceivePacketBuffer__sub_object(telemetry::HalInterface&)</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, packet.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>telemetry::ReceivePacketBuffer::add_byte(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = telemetry::ReceivePacketBuffer::add_byte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::process_received_data()
</UL>

<P><STRONG><a name="[132]"></a>telemetry::ReceivePacketBuffer::read_uint8()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = telemetry::ReceivePacketBuffer::read_uint8()
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::process_received_packet()
</UL>

<P><STRONG><a name="[12b]"></a>telemetry::ReceivePacketBuffer::read_uint16()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = telemetry::ReceivePacketBuffer::read_uint16()
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 telemetry::internal::buf_read&lang;unsigned short&rang;(telemetry::ReceivePacketBuffer&)
</UL>

<P><STRONG><a name="[12d]"></a>telemetry::ReceivePacketBuffer::read_uint32()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = telemetry::ReceivePacketBuffer::read_uint32()
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 telemetry::internal::buf_read&lang;unsigned&rang;(telemetry::ReceivePacketBuffer&)
</UL>

<P><STRONG><a name="[128]"></a>telemetry::ReceivePacketBuffer::read_float()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = telemetry::ReceivePacketBuffer::read_float()
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 telemetry::internal::buf_read&lang;unsigned char&rang;(telemetry::ReceivePacketBuffer&)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 telemetry::internal::buf_read&lang;float&rang;(telemetry::ReceivePacketBuffer&)
</UL>

<P><STRONG><a name="[130]"></a>telemetry::FixedLengthTransmitPacket::FixedLengthTransmitPacket(telemetry::HalInterface&, unsigned)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = telemetry::FixedLengthTransmitPacket::FixedLengthTransmitPacket(telemetry::HalInterface&, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::transmit_data()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::transmit_header()
</UL>

<P><STRONG><a name="[2aa]"></a>telemetry::FixedLengthTransmitPacket::FixedLengthTransmitPacket__sub_object(telemetry::HalInterface&, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, packet.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>telemetry::FixedLengthTransmitPacket::write_byte(unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = telemetry::FixedLengthTransmitPacket::write_byte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::FixedLengthTransmitPacket::write_float(float)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::FixedLengthTransmitPacket::write_uint32(unsigned)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::FixedLengthTransmitPacket::write_uint16(unsigned short)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::FixedLengthTransmitPacket::write_uint8(unsigned char)
</UL>

<P><STRONG><a name="[9b]"></a>telemetry::FixedLengthTransmitPacket::write_uint8(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = telemetry::FixedLengthTransmitPacket::write_uint8(unsigned char) &rArr; telemetry::FixedLengthTransmitPacket::write_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::FixedLengthTransmitPacket::write_byte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::transmit_data()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::transmit_header()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> packet.o(.constdata__ZTVN9telemetry25FixedLengthTransmitPacketE)
</UL>
<P><STRONG><a name="[9c]"></a>telemetry::FixedLengthTransmitPacket::write_uint16(unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = telemetry::FixedLengthTransmitPacket::write_uint16(unsigned short) &rArr; telemetry::FixedLengthTransmitPacket::write_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::FixedLengthTransmitPacket::write_byte(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> packet.o(.constdata__ZTVN9telemetry25FixedLengthTransmitPacketE)
</UL>
<P><STRONG><a name="[9d]"></a>telemetry::FixedLengthTransmitPacket::write_uint32(unsigned)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = telemetry::FixedLengthTransmitPacket::write_uint32(unsigned) &rArr; telemetry::FixedLengthTransmitPacket::write_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::FixedLengthTransmitPacket::write_byte(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> packet.o(.constdata__ZTVN9telemetry25FixedLengthTransmitPacketE)
</UL>
<P><STRONG><a name="[9e]"></a>telemetry::FixedLengthTransmitPacket::write_float(float)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = telemetry::FixedLengthTransmitPacket::write_float(float) &rArr; telemetry::FixedLengthTransmitPacket::write_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::FixedLengthTransmitPacket::write_byte(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> packet.o(.constdata__ZTVN9telemetry25FixedLengthTransmitPacketE)
</UL>
<P><STRONG><a name="[9f]"></a>telemetry::FixedLengthTransmitPacket::finish()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = telemetry::FixedLengthTransmitPacket::finish()
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::transmit_data()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::transmit_header()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> packet.o(.constdata__ZTVN9telemetry25FixedLengthTransmitPacketE)
</UL>
<P><STRONG><a name="[2ab]"></a>void telemetry::internal::pkt_write&lang;unsigned char&rang;(telemetry::TransmitPacket&, T1)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, packet.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>void telemetry::internal::pkt_write&lang;unsigned short&rang;(telemetry::TransmitPacket&, T1)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = void telemetry::internal::pkt_write&lang;unsigned short&rang;(telemetry::TransmitPacket&, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::serialize_data(unsigned short, telemetry::TransmitPacket&)
</UL>

<P><STRONG><a name="[278]"></a>void telemetry::internal::pkt_write&lang;unsigned&rang;(telemetry::TransmitPacket&, T1)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = void telemetry::internal::pkt_write&lang;unsigned&rang;(telemetry::TransmitPacket&, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;unsigned&rang;::serialize_data(unsigned, telemetry::TransmitPacket&)
</UL>

<P><STRONG><a name="[275]"></a>void telemetry::internal::pkt_write&lang;float&rang;(telemetry::TransmitPacket&, T1)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = void telemetry::internal::pkt_write&lang;float&rang;(telemetry::TransmitPacket&, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;float&rang;::serialize_data(float, telemetry::TransmitPacket&)
</UL>

<P><STRONG><a name="[127]"></a>T1 telemetry::internal::buf_read&lang;unsigned char&rang;(telemetry::ReceivePacketBuffer&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, packet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::ReceivePacketBuffer::read_float()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>

<P><STRONG><a name="[12a]"></a>T1 telemetry::internal::buf_read&lang;unsigned short&rang;(telemetry::ReceivePacketBuffer&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T1 telemetry::internal::buf_read&lang;unsigned short&rang;(telemetry::ReceivePacketBuffer&) &rArr; telemetry::ReceivePacketBuffer::read_uint16()
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::ReceivePacketBuffer::read_uint16()
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::set_from_packet(telemetry::ReceivePacketBuffer&)
</UL>

<P><STRONG><a name="[12c]"></a>T1 telemetry::internal::buf_read&lang;unsigned&rang;(telemetry::ReceivePacketBuffer&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T1 telemetry::internal::buf_read&lang;unsigned&rang;(telemetry::ReceivePacketBuffer&) &rArr; telemetry::ReceivePacketBuffer::read_uint32()
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::ReceivePacketBuffer::read_uint32()
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;unsigned&rang;::set_from_packet(telemetry::ReceivePacketBuffer&)
</UL>

<P><STRONG><a name="[12e]"></a>T1 telemetry::internal::buf_read&lang;float&rang;(telemetry::ReceivePacketBuffer&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = T1 telemetry::internal::buf_read&lang;float&rang;(telemetry::ReceivePacketBuffer&) &rArr; telemetry::ReceivePacketBuffer::read_float()
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::ReceivePacketBuffer::read_float()
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;float&rang;::set_from_packet(telemetry::ReceivePacketBuffer&)
</UL>

<P><STRONG><a name="[121]"></a>telemetry::Telemetry::add_data(telemetry::Data&)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, telemetry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = telemetry::Telemetry::add_data(telemetry::Data&) &rArr; telemetry::Telemetry::do_error(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::do_error(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;float&rang;::Numeric(telemetry::Telemetry&, const char*, const char*, const char*, float)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::NumericArray(telemetry::Telemetry&, const char*, const char*, const char*, unsigned short)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_50cc0329
</UL>

<P><STRONG><a name="[114]"></a>telemetry::Telemetry::mark_data_updated(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, telemetry.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;unsigned&rang;::set_from_packet(telemetry::ReceivePacketBuffer&)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;float&rang;::operator =(float)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;float&rang;::set_from_packet(telemetry::ReceivePacketBuffer&)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::set_from_packet(telemetry::ReceivePacketBuffer&)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[111]"></a>telemetry::Telemetry::transmit_header()</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, telemetry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = telemetry::Telemetry::transmit_header() &rArr; telemetry::FixedLengthTransmitPacket::write_uint8(unsigned char) &rArr; telemetry::FixedLengthTransmitPacket::write_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::do_error(const char*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::FixedLengthTransmitPacket::~FixedLengthTransmitPacket()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::FixedLengthTransmitPacket::finish()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::FixedLengthTransmitPacket::write_uint8(unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::FixedLengthTransmitPacket::FixedLengthTransmitPacket(telemetry::HalInterface&, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[131]"></a>telemetry::Telemetry::process_received_packet()</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, telemetry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = telemetry::Telemetry::process_received_packet() &rArr; telemetry::ReceivePacketBuffer::read_uint8()
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::ReceivePacketBuffer::read_uint8()
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::process_received_data()
</UL>

<P><STRONG><a name="[133]"></a>telemetry::Telemetry::process_received_data()</STRONG> (Thumb, 498 bytes, Stack size 24 bytes, telemetry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = telemetry::Telemetry::process_received_data() &rArr; telemetry::Telemetry::process_received_packet() &rArr; telemetry::ReceivePacketBuffer::read_uint8()
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Queue&lang;unsigned char, (unsigned)256&rang;::enqueue(const unsigned char&)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::process_received_packet()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::ReceivePacketBuffer::add_byte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::do_io()
</UL>

<P><STRONG><a name="[136]"></a>telemetry::Telemetry::transmit_data()</STRONG> (Thumb, 382 bytes, Stack size 56 bytes, telemetry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = telemetry::Telemetry::transmit_data() &rArr; telemetry::FixedLengthTransmitPacket::write_uint8(unsigned char) &rArr; telemetry::FixedLengthTransmitPacket::write_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::do_error(const char*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::FixedLengthTransmitPacket::~FixedLengthTransmitPacket()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::FixedLengthTransmitPacket::finish()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::FixedLengthTransmitPacket::write_uint8(unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::FixedLengthTransmitPacket::FixedLengthTransmitPacket(telemetry::HalInterface&, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::do_io()
</UL>

<P><STRONG><a name="[116]"></a>telemetry::Telemetry::do_io()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, telemetry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = telemetry::Telemetry::do_io() &rArr; telemetry::Telemetry::transmit_data() &rArr; telemetry::FixedLengthTransmitPacket::write_uint8(unsigned char) &rArr; telemetry::FixedLengthTransmitPacket::write_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::transmit_data()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::process_received_data()
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[137]"></a>telemetry::Telemetry::receive_available()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, telemetry.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Queue&lang;unsigned char, (unsigned)256&rang;::empty() const
</UL>

<P><STRONG><a name="[139]"></a>telemetry::Telemetry::read_receive()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, telemetry.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Queue&lang;unsigned char, (unsigned)256&rang;::empty() const
</UL>

<P><STRONG><a name="[a2]"></a>telemetry::MbedHal::transmit_byte(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, telemetry-mbed-hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = telemetry::MbedHal::transmit_byte(unsigned char) &rArr; mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> telemetry-mbed-hal.o(.constdata__ZTVN9telemetry7MbedHalE)
</UL>
<P><STRONG><a name="[a3]"></a>telemetry::MbedHal::rx_available()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, telemetry-mbed-hal.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> telemetry-mbed-hal.o(.constdata__ZTVN9telemetry7MbedHalE)
</UL>
<P><STRONG><a name="[a4]"></a>telemetry::MbedHal::receive_byte()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, telemetry-mbed-hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = telemetry::MbedHal::receive_byte() &rArr; AjK::MODSERIAL::__getc(bool) &rArr; AjK::MODSERIAL::isr_rx() &rArr; gpio_init &rArr; gpio_set &rArr; pin_function
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::__getc(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> telemetry-mbed-hal.o(.constdata__ZTVN9telemetry7MbedHalE)
</UL>
<P><STRONG><a name="[a5]"></a>telemetry::MbedHal::do_error(const char*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, telemetry-mbed-hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = telemetry::MbedHal::do_error(const char*) &rArr; mbed::Stream::puts(const char*) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::puts(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> telemetry-mbed-hal.o(.constdata__ZTVN9telemetry7MbedHalE)
</UL>
<P><STRONG><a name="[a6]"></a>telemetry::MbedHal::get_time_ms()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, telemetry-mbed-hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = telemetry::MbedHal::get_time_ms() &rArr; mbed::Timer::read_ms() &rArr; mbed::Timer::read_us() &rArr; mbed::Timer::slicetime() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> telemetry-mbed-hal.o(.constdata__ZTVN9telemetry7MbedHalE)
</UL>
<P><STRONG><a name="[13d]"></a>PID::setTunings(float, float, float)</STRONG> (Thumb, 246 bytes, Stack size 72 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PID::setTunings(float, float, float) &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::PID(float, float, float, float)
</UL>

<P><STRONG><a name="[ff]"></a>PID::setOutputLimits(float, float)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PID::setOutputLimits(float, float) &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::PID(float, float, float, float)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steer_setup()
</UL>

<P><STRONG><a name="[fe]"></a>PID::setInputLimits(float, float)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PID::setInputLimits(float, float) &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::PID(float, float, float, float)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steer_setup()
</UL>

<P><STRONG><a name="[11c]"></a>PID::PID(float, float, float, float)</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PID::PID(float, float, float, float) &rArr; PID::setTunings(float, float, float) &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setTunings(float, float, float)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setOutputLimits(float, float)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setInputLimits(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_50cc0329
</UL>

<P><STRONG><a name="[2ac]"></a>PID::PID__sub_object(float, float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>PID::reset()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PID::reset() &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setMode(int)
</UL>

<P><STRONG><a name="[101]"></a>PID::setMode(int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PID::setMode(int) &rArr; PID::reset() &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steer_setup()
</UL>

<P><STRONG><a name="[e6]"></a>PID::setInterval(float)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PID::setInterval(float) &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steer(int)
</UL>

<P><STRONG><a name="[102]"></a>PID::setSetPoint(float)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steer_setup()
</UL>

<P><STRONG><a name="[e8]"></a>PID::setProcessValue(float)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steer(int)
</UL>

<P><STRONG><a name="[100]"></a>PID::setBias(float)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steer_setup()
</UL>

<P><STRONG><a name="[e9]"></a>PID::compute()</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PID::compute() &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steer(int)
</UL>

<P><STRONG><a name="[2ad]"></a>PID::getInMin()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>PID::getInMax()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>PID::getOutMin()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>PID::getOutMax()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>PID::getInterval()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>PID::getPParam()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>PID::getIParam()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>PID::getDParam()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>rt_init_stack</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hal_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[18e]"></a>rt_ret_val</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
</UL>

<P><STRONG><a name="[196]"></a>rt_ret_val2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ret_val2
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[48]"></a>svcKernelInitialize</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = svcKernelInitialize &rArr; sysThreadError &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>svcThreadGetId</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>svcThreadTerminate</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_stk_check &rArr; os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>osThreadExit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>svcThreadCreate</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = svcThreadCreate &rArr; sysThreadError &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_TID
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>svcMessageCreate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = svcMessageCreate &rArr; sysThreadError &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>svcKernelStart</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = svcKernelStart &rArr; svcThreadCreate &rArr; sysThreadError &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>svcKernelRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>osKernelInitialize</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; sysThreadError &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[d9]"></a>osKernelStart</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osKernelStart
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[151]"></a>osKernelRunning</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>

<P><STRONG><a name="[4c]"></a>svcThreadYield</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = svcThreadYield &rArr; rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>svcThreadSetPriority</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcThreadSetPriority &rArr; rt_tsk_prio &rArr; rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>svcThreadGetPriority</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcThreadGetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>osThreadCreate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; sysThreadError &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread(void(*)(const void*), void*, osPriority, unsigned, unsigned char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[153]"></a>osThreadGetId</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::gettid()
</UL>

<P><STRONG><a name="[154]"></a>osThreadTerminate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadTerminate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
</UL>

<P><STRONG><a name="[155]"></a>osThreadYield</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::yield()
</UL>

<P><STRONG><a name="[156]"></a>osThreadSetPriority</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadSetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::set_priority(osPriority)
</UL>

<P><STRONG><a name="[157]"></a>osThreadGetPriority</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::get_priority()
</UL>

<P><STRONG><a name="[4f]"></a>svcDelay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcDelay &rArr; rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[159]"></a>osDelay</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::wait(unsigned)
</UL>

<P><STRONG><a name="[2b5]"></a>osWait</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>svcTimerCreate</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = svcTimerCreate &rArr; sysThreadError &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>svcTimerStart</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcTimerStart &rArr; rt_ms2tick
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_remove
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>svcTimerStop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcTimerStop &rArr; rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_remove
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>svcTimerDelete</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcTimerDelete &rArr; rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_remove
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>svcTimerCall</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcTimerCall
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[160]"></a>sysTimerTick</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[161]"></a>osTimerCreate</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCreate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>

<P><STRONG><a name="[162]"></a>osTimerStart</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[163]"></a>osTimerStop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[164]"></a>osTimerDelete</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[168]"></a>osTimerCall</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osTimerCall
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[55]"></a>svcMessageGet</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcMessageGet &rArr; rt_mbx_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[166]"></a>osMessageGet</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = osMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailGet
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[f]"></a>osTimerThread</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = osTimerThread &rArr; osMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>svcSignalSet</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcSignalSet &rArr; rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>svcSignalClear</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcSignalClear &rArr; rt_evt_clr
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_clr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>svcSignalGet</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcSignalGet
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>svcSignalWait</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcSignalWait &rArr; rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[16c]"></a>osSignalSet</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::signal_set(int)
</UL>

<P><STRONG><a name="[16e]"></a>osSignalClear</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[16f]"></a>osSignalGet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[170]"></a>osSignalWait</STRONG> (Thumb, 50 bytes, Stack size 56 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::signal_wait(int, unsigned)
</UL>

<P><STRONG><a name="[5a]"></a>svcMutexCreate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = svcMutexCreate &rArr; sysThreadError &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>svcMutexWait</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcMutexWait &rArr; rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>svcMutexRelease</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = svcMutexRelease &rArr; rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>svcMutexDelete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcMutexDelete &rArr; rt_mut_delete &rArr; rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[173]"></a>osMutexCreate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>

<P><STRONG><a name="[174]"></a>osMutexWait</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[175]"></a>osMutexRelease</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[176]"></a>osMutexDelete</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[5e]"></a>svcSemaphoreCreate</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = svcSemaphoreCreate &rArr; sysThreadError &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>svcSemaphoreWait</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcSemaphoreWait &rArr; rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>svcSemaphoreRelease</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = svcSemaphoreRelease &rArr; rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>svcSemaphoreDelete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = svcSemaphoreDelete &rArr; rt_sem_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[17b]"></a>osSemaphoreCreate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>

<P><STRONG><a name="[17c]"></a>osSemaphoreWait</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[17d]"></a>osSemaphoreRelease</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>

<P><STRONG><a name="[17f]"></a>osSemaphoreDelete</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[62]"></a>svcPoolCreate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = svcPoolCreate &rArr; sysThreadError &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>sysPoolAlloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sysPoolAlloc &rArr; rt_clr_box
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_clr_box
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCAlloc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>sysPoolFree</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[182]"></a>osPoolCreate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPoolCreate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>

<P><STRONG><a name="[183]"></a>osPoolAlloc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolAlloc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>

<P><STRONG><a name="[184]"></a>osPoolCAlloc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolAlloc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>

<P><STRONG><a name="[185]"></a>osPoolFree</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolFree
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>

<P><STRONG><a name="[66]"></a>svcMessagePut</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcMessagePut &rArr; rt_mbx_send &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[187]"></a>osMessageCreate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>

<P><STRONG><a name="[188]"></a>osMessagePut</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailPut
</UL>

<P><STRONG><a name="[67]"></a>svcMailCreate</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = svcMailCreate &rArr; sysThreadError &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>sysMailAlloc</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sysMailAlloc &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_clr_box
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCAlloc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>sysMailFree</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = sysMailFree &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[190]"></a>osMailCreate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMailCreate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>

<P><STRONG><a name="[191]"></a>osMailAlloc</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[192]"></a>osMailCAlloc</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[193]"></a>osMailFree</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[194]"></a>osMailPut</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>

<P><STRONG><a name="[195]"></a>osMailGet</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[16b]"></a>rt_evt_wait</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, rt_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
</UL>

<P><STRONG><a name="[169]"></a>rt_evt_set</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rt_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
</UL>

<P><STRONG><a name="[16a]"></a>rt_evt_clr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_evt_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalClear
</UL>

<P><STRONG><a name="[16d]"></a>isr_evt_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[2b6]"></a>rt_evt_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_event.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>rt_evt_psh</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rt_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[189]"></a>rt_put_prio</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, rt_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
</UL>

<P><STRONG><a name="[18d]"></a>rt_get_first</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rt_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resume
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
</UL>

<P><STRONG><a name="[1a2]"></a>rt_put_rdy_first</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resume
</UL>

<P><STRONG><a name="[1a8]"></a>rt_get_same_rdy_prio</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rt_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>

<P><STRONG><a name="[199]"></a>rt_rmv_list</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rt_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[198]"></a>rt_resort_prio</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, rt_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
</UL>

<P><STRONG><a name="[1a7]"></a>rt_put_dly</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rt_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[19a]"></a>rt_dec_dly</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, rt_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resume
</UL>

<P><STRONG><a name="[18f]"></a>rt_rmv_dly</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
</UL>

<P><STRONG><a name="[18b]"></a>rt_psq_enq</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, rt_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
</UL>

<P><STRONG><a name="[14c]"></a>rt_mbx_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rt_mailbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMailCreate
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[186]"></a>rt_mbx_send</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, rt_mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_mbx_send &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessagePut
</UL>

<P><STRONG><a name="[165]"></a>rt_mbx_wait</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, rt_mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_mbx_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
</UL>

<P><STRONG><a name="[15e]"></a>rt_mbx_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_mailbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[15f]"></a>isr_mbx_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rt_mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[167]"></a>isr_mbx_receive</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rt_mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[19b]"></a>rt_mbx_psh</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, rt_mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = rt_mbx_psh &rArr; os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[171]"></a>rt_mut_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[172]"></a>rt_mut_delete</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, rt_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mut_delete &rArr; rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexDelete
</UL>

<P><STRONG><a name="[6c]"></a>rt_mut_release</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, rt_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>rt_mut_wait</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rt_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.text)
</UL>
<P><STRONG><a name="[180]"></a>_init_box</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, rt_membox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMailCreate
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPoolCreate
</UL>

<P><STRONG><a name="[39]"></a>rt_alloc_box</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_membox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm0.o(.emb_text)
</UL>
<P><STRONG><a name="[19c]"></a>_calloc_box</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, rt_membox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_box
</UL>

<P><STRONG><a name="[3a]"></a>rt_free_box</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rt_membox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm0.o(.emb_text)
</UL>
<P><STRONG><a name="[1aa]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[19e]"></a>rt_chk_robin</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_robin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[1a0]"></a>rt_tsk_lock</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, rt_system.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_suspend
</UL>

<P><STRONG><a name="[19f]"></a>rt_suspend</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, rt_system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_lock
</UL>

<P><STRONG><a name="[1a4]"></a>rt_tsk_unlock</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, rt_system.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resume
</UL>

<P><STRONG><a name="[1a1]"></a>rt_resume</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, rt_system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_unlock
</UL>

<P><STRONG><a name="[18c]"></a>rt_psh_req</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
</UL>

<P><STRONG><a name="[d1]"></a>rt_pop_req</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, rt_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1ab]"></a>os_tick_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[d4]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[d2]"></a>rt_systick</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d0]"></a>rt_stk_check</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = rt_stk_check &rArr; os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[177]"></a>rt_sem_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_semaphore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>

<P><STRONG><a name="[17a]"></a>rt_sem_delete</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rt_semaphore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_sem_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreDelete
</UL>

<P><STRONG><a name="[179]"></a>rt_sem_send</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rt_semaphore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
</UL>

<P><STRONG><a name="[178]"></a>rt_sem_wait</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rt_semaphore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
</UL>

<P><STRONG><a name="[17e]"></a>isr_sem_send</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rt_semaphore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[1a5]"></a>rt_sem_psh</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rt_semaphore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[14a]"></a>rt_get_TID</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rt_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[22a]"></a>__user_perthread_libspace</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[149]"></a>rt_init_context</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[1a3]"></a>rt_switch_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rt_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resume
</UL>

<P><STRONG><a name="[14b]"></a>rt_dispatch</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[18a]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_itv_wait
</UL>

<P><STRONG><a name="[152]"></a>rt_tsk_pass</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_same_rdy_prio
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadYield
</UL>

<P><STRONG><a name="[146]"></a>rt_tsk_self</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[14d]"></a>rt_tsk_prio</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_tsk_prio &rArr; rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadSetPriority
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[148]"></a>rt_tsk_delete</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = rt_tsk_delete &rArr; rt_stk_check &rArr; os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[145]"></a>rt_sys_init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[14e]"></a>rt_sys_start</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sys_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[6a]"></a>os_idle_demon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>os_error</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>

<P><STRONG><a name="[b7]"></a>sysThreadError</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = sysThreadError &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMailCreate
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPoolCreate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCreate
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[b8]"></a>_mutex_initialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _mutex_initialize &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>

<P><STRONG><a name="[b9]"></a>_mutex_acquire</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[ba]"></a>_mutex_release</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[b5]"></a>set_main_stack</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2b7]"></a>rt_time_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>rt_dly_wait</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[2b8]"></a>rt_itv_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_time.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>rt_itv_wait</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[112]"></a>rtos::Thread::Thread(void(*)(const void*), void*, osPriority, unsigned, unsigned char*)</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = rtos::Thread::Thread(void(*)(const void*), void*, osPriority, unsigned, unsigned char*) &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; sysThreadError &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2b9]"></a>rtos::Thread::Thread__sub_object(void(*)(const void*), void*, osPriority, unsigned, unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>rtos::Thread::terminate()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtos::Thread::terminate() &rArr; osThreadTerminate
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
</UL>

<P><STRONG><a name="[113]"></a>rtos::Thread::set_priority(osPriority)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtos::Thread::set_priority(osPriority) &rArr; osThreadSetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1b1]"></a>rtos::Thread::get_priority()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
</UL>

<P><STRONG><a name="[1b2]"></a>rtos::Thread::signal_set(int)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[2ba]"></a>rtos::Thread::get_state()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>rtos::Thread::signal_wait(int, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
</UL>

<P><STRONG><a name="[ed]"></a>rtos::Thread::wait(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtos::Thread::wait(unsigned) &rArr; osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_data_thread(const void*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1b4]"></a>rtos::Thread::yield()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>

<P><STRONG><a name="[1b5]"></a>rtos::Thread::gettid()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>

<P><STRONG><a name="[92]"></a>rtos::Thread::~Thread()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rtos::Thread::~Thread() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.constdata__ZTVN4rtos6ThreadE)
</UL>
<P><STRONG><a name="[2bb]"></a>rtos::Thread::~Thread__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>rtos::Thread::~Thread__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rtos::Thread::~Thread__deallocating() &rArr; rtos::Thread::~Thread() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.constdata__ZTVN4rtos6ThreadE)
</UL>
<P><STRONG><a name="[13b]"></a>AjK::MODSERIAL::__getc(bool)</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, getc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AjK::MODSERIAL::__getc(bool) &rArr; AjK::MODSERIAL::isr_rx() &rArr; gpio_init &rArr; gpio_set &rArr; pin_function
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::isr_rx()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::MbedHal::receive_byte()
</UL>

<P><STRONG><a name="[1b8]"></a>AjK::MODSERIAL::init(int, int, PinName)</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = AjK::MODSERIAL::init(int, int, PinName) &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::SerialBase::attach&lang;AjK::MODSERIAL&rang;(T1*, void(T1::*)(), mbed::SerialBase::IrqType)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::setBase()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::initDevice()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::MODSERIAL(PinName, PinName, const char*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::MODSERIAL(PinName, PinName, int, int, const char*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::MODSERIAL(PinName, PinName, int, const char*)
</UL>

<P><STRONG><a name="[11]"></a>AjK::MODSERIAL::isr_rx()</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, isr_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AjK::MODSERIAL::isr_rx() &rArr; gpio_init &rArr; gpio_set &rArr; pin_function
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL_callback::call(AjK::MODSERIAL_IRQ_INFO*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::__getc(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(.data)
</UL>
<P><STRONG><a name="[1bf]"></a>AjK::MODSERIAL::isr_tx(bool)</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, isr_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AjK::MODSERIAL::isr_tx(bool) &rArr; AjK::MODSERIAL_callback::call(AjK::MODSERIAL_IRQ_INFO*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL_callback::call(AjK::MODSERIAL_IRQ_INFO*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::__putc(int, bool)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::isr_tx()
</UL>

<P><STRONG><a name="[1c0]"></a>AjK::MODSERIAL::__putc(int, bool)</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, putc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AjK::MODSERIAL::__putc(int, bool) &rArr; AjK::MODSERIAL::isr_tx(bool) &rArr; AjK::MODSERIAL_callback::call(AjK::MODSERIAL_IRQ_INFO*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL_callback::call(AjK::MODSERIAL_IRQ_INFO*)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::isr_tx(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::_putc(int)
</UL>

<P><STRONG><a name="[1b9]"></a>AjK::MODSERIAL::setBase()</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, modserial_kl25z.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::init(int, int, PinName)
</UL>

<P><STRONG><a name="[1bc]"></a>AjK::MODSERIAL::initDevice()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modserial_kl25z.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::init(int, int, PinName)
</UL>

<P><STRONG><a name="[2bc]"></a>AjK::MODSERIAL::txIsBusy()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, modserial_kl25z.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>AjK::MODSERIAL::MODSERIAL(PinName, PinName, const char*)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, modserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = AjK::MODSERIAL::MODSERIAL(PinName, PinName, const char*) &rArr; mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::init(int, int, PinName)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL_IRQ_INFO::MODSERIAL_IRQ_INFO()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_50cc0329
</UL>

<P><STRONG><a name="[2bd]"></a>AjK::MODSERIAL::MODSERIAL__sub_object(PinName, PinName, const char*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, modserial.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>AjK::MODSERIAL::MODSERIAL(PinName, PinName, int, const char*)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, modserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::init(int, int, PinName)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL_IRQ_INFO::MODSERIAL_IRQ_INFO()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>

<P><STRONG><a name="[2be]"></a>AjK::MODSERIAL::MODSERIAL__sub_object(PinName, PinName, int, const char*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, modserial.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>AjK::MODSERIAL::MODSERIAL(PinName, PinName, int, int, const char*)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, modserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::init(int, int, PinName)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL_IRQ_INFO::MODSERIAL_IRQ_INFO()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>

<P><STRONG><a name="[2bf]"></a>AjK::MODSERIAL::MODSERIAL__sub_object(PinName, PinName, int, int, const char*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, modserial.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>AjK::MODSERIAL::~MODSERIAL()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, modserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = AjK::MODSERIAL::~MODSERIAL() &rArr; mbed::Stream::~Stream__sub_object() &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to AjK::MODSERIAL::~MODSERIAL()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::~MODSERIAL__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
</UL>
<P><STRONG><a name="[2c0]"></a>AjK::MODSERIAL::~MODSERIAL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, modserial.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>AjK::MODSERIAL::~MODSERIAL__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, modserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = AjK::MODSERIAL::~MODSERIAL__deallocating() &rArr; AjK::MODSERIAL::~MODSERIAL() &rArr; mbed::Stream::~Stream__sub_object() &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::~MODSERIAL()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to AjK::MODSERIAL::~MODSERIAL__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
</UL>
<P><STRONG><a name="[8a]"></a>thunk{-4} to AjK::MODSERIAL::~MODSERIAL__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = thunk{-4} to AjK::MODSERIAL::~MODSERIAL__deallocating() &rArr; AjK::MODSERIAL::~MODSERIAL__deallocating() &rArr; AjK::MODSERIAL::~MODSERIAL() &rArr; mbed::Stream::~Stream__sub_object() &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::~MODSERIAL__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
</UL>
<P><STRONG><a name="[89]"></a>thunk{-4} to AjK::MODSERIAL::~MODSERIAL()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = thunk{-4} to AjK::MODSERIAL::~MODSERIAL() &rArr; AjK::MODSERIAL::~MODSERIAL() &rArr; mbed::Stream::~Stream__sub_object() &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::~MODSERIAL()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
</UL>
<P><STRONG><a name="[2c1]"></a>AjK::MODSERIAL::txBufferFull()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, modserial.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>AjK::MODSERIAL::rxBufferFull()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, modserial.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>AjK::MODSERIAL::txBufferEmpty()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modserial.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>AjK::MODSERIAL::rxBufferEmpty()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modserial.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>AjK::MODSERIAL::claim(std::__FILE*)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, modserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[2c5]"></a>AjK::MODSERIAL::rxDiscardLastChar()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, modserial.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>_malloc_internal</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1ba]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::init(int, int, PinName)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
</UL>

<P><STRONG><a name="[1cf]"></a>_free_internal</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[1c6]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::~MODSERIAL()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[1ad]"></a>__2fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread(void(*)(const void*), void*, osPriority, unsigned, unsigned char*)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::init(int, int, PinName)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_format
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::claim(std::__FILE*)
</UL>

<P><STRONG><a name="[1c8]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::claim(std::__FILE*)
</UL>

<P><STRONG><a name="[206]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[c3]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[1d4]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[1d5]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[1d6]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[c1]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[1d7]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1da]"></a>__0sscanf</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1dc]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1de]"></a>setbuf</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setbuf &rArr; setvbuf &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[2c6]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>_fclose_internal</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[1e3]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fputc_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fputc &rArr; _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
</UL>

<P><STRONG><a name="[1e4]"></a>fclose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fclose_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>

<P><STRONG><a name="[1e5]"></a>_do_fflush</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fflush_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[1e7]"></a>fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fflush_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::puts(const char*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
</UL>

<P><STRONG><a name="[1ca]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setvbuf &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::claim(std::__FILE*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1c9]"></a>freopen</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::claim(std::__FILE*)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1ea]"></a>fopen</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[db]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Data::get_header_kvrs_length()
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::claim(std::__FILE*)
</UL>

<P><STRONG><a name="[246]"></a>strncmp</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[1eb]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::FunctionPointer::membercaller&lang;AjK::MODSERIAL&rang;(void*, char*)
</UL>

<P><STRONG><a name="[2c7]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[1ed]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_setup()
</UL>

<P><STRONG><a name="[2c8]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[2c9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[24f]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2ca]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extosc_frequency
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[2cb]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
</UL>

<P><STRONG><a name="[2cc]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setTunings(float, float, float)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed(float)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_read
</UL>

<P><STRONG><a name="[2cd]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
</UL>

<P><STRONG><a name="[1f0]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[2ce]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed(float)
</UL>

<P><STRONG><a name="[1f4]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setTunings(float, float, float)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
</UL>

<P><STRONG><a name="[1f6]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[1f5]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[1f7]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
</UL>

<P><STRONG><a name="[2cf]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[2d0]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setTunings(float, float, float)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
</UL>

<P><STRONG><a name="[2d1]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setTunings(float, float, float)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed(float)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_read
</UL>

<P><STRONG><a name="[2d2]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::reset()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setTunings(float, float, float)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setOutputLimits(float, float)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setInputLimits(float, float)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setInterval(float)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_read
</UL>

<P><STRONG><a name="[1fa]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[1f9]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steer(int)
</UL>

<P><STRONG><a name="[2d3]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 telemetry::internal::buf_read&lang;unsigned char&rang;(telemetry::ReceivePacketBuffer&)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_pulsewidth_us
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>

<P><STRONG><a name="[2d4]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_pulsewidth_us
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steer(int)
</UL>

<P><STRONG><a name="[2d5]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_read
</UL>

<P><STRONG><a name="[2d6]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>__ARM_scalbnf</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
</UL>

<P><STRONG><a name="[1ce]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1fe]"></a>__rt_new_handler_addr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_new_handler_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_new_handler_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[1ff]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_ddtor_pointer_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ddtor_pointer_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[2d7]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[201]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[c7]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[203]"></a>__Heap_Initialize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[7]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1d1]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[6e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[204]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[207]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[c5]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[1dd]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[1db]"></a>__vfscanf_char</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[6f]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[209]"></a>__flsbuf</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[258]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>

<P><STRONG><a name="[2d9]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>_fseek</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[2da]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[20e]"></a>_writebuf</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1e0]"></a>_fflush</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[20a]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[cc]"></a>_initio</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[213]"></a>_terminateio</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, initio_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free (Weak Reference)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[215]"></a>__rt_SIGPVFN</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[1d2]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7a]"></a>__default_new_handler()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[219]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[21c]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[200]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[73]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isspace &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[1d0]"></a>_printf_char_file</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, _printf_char_file_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[208]"></a>__vfscanf</STRONG> (Thumb, 880 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[20f]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[2db]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>fputs</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fputs_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fputs &rArr; _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::puts(const char*)
</UL>

<P><STRONG><a name="[217]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[212]"></a>__rt_SIGRTRED</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[202]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[216]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[218]"></a>std::terminate()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[225]"></a>__cxa_get_globals</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[21a]"></a>__fpl_cmpreturn</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[21b]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[21d]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[221]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[21e]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[c9]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[227]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_eh_globals_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_eh_globals_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[21f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_errno_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[2dc]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[224]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[222]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[223]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[228]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[2de]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[22d]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[2e0]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>__rt_SIGABRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[2e2]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[2e3]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = main &rArr; $Super$$main &rArr; rtos::Thread::Thread(void(*)(const void*), void*, osPriority, unsigned, unsigned char*) &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; sysThreadError &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.data)
</UL>
<P><STRONG><a name="[25d]"></a>NVIC_SetVector</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, cmsis_nvic.o(i.NVIC_SetVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
</UL>

<P><STRONG><a name="[3b]"></a>SystemInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, system_MKL25Z4.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_MKL25Z4.o(.text)
</UL>
<P><STRONG><a name="[1c2]"></a>AjK::MODSERIAL_IRQ_INFO::MODSERIAL_IRQ_INFO()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modserial.o(i._ZN3AjK18MODSERIAL_IRQ_INFOC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::MODSERIAL(PinName, PinName, const char*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::MODSERIAL(PinName, PinName, int, int, const char*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::MODSERIAL(PinName, PinName, int, const char*)
</UL>

<P><STRONG><a name="[2e5]"></a>AjK::MODSERIAL_IRQ_INFO::MODSERIAL_IRQ_INFO__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, modserial.o(i._ZN3AjK18MODSERIAL_IRQ_INFOC1Ev), UNUSED)

<P><STRONG><a name="[1be]"></a>AjK::MODSERIAL_callback::call(AjK::MODSERIAL_IRQ_INFO*)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, isr_rx.o(i._ZN3AjK18MODSERIAL_callback4callEPNS_18MODSERIAL_IRQ_INFOE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AjK::MODSERIAL_callback::call(AjK::MODSERIAL_IRQ_INFO*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::__putc(int, bool)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::isr_tx(bool)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::isr_rx()
</UL>

<P><STRONG><a name="[6d]"></a>AjK::MODSERIAL_callback::MODSERIAL_callback()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modserial.o(i._ZN3AjK18MODSERIAL_callbackC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> modserial.o(.text)
</UL>
<P><STRONG><a name="[2e6]"></a>AjK::MODSERIAL_callback::MODSERIAL_callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, modserial.o(i._ZN3AjK18MODSERIAL_callbackC1Ev), UNUSED)

<P><STRONG><a name="[88]"></a>AjK::MODSERIAL::_putc(int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, modserial.o(i._ZN3AjK9MODSERIAL5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AjK::MODSERIAL::_putc(int) &rArr; AjK::MODSERIAL::__putc(int, bool) &rArr; AjK::MODSERIAL::isr_tx(bool) &rArr; AjK::MODSERIAL_callback::call(AjK::MODSERIAL_IRQ_INFO*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::__putc(int, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
</UL>
<P><STRONG><a name="[12]"></a>AjK::MODSERIAL::isr_tx()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, init.o(i._ZN3AjK9MODSERIAL6isr_txEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AjK::MODSERIAL::isr_tx() &rArr; AjK::MODSERIAL::isr_tx(bool) &rArr; AjK::MODSERIAL_callback::call(AjK::MODSERIAL_IRQ_INFO*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::isr_tx(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(.data)
</UL>
<P><STRONG><a name="[de]"></a>mbed::DigitalOut::write(int)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i._ZN4mbed10DigitalOut5writeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::DigitalOut::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_led()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_setup()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_setup()
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_data_thread(const void*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dummy_read()
</UL>

<P><STRONG><a name="[117]"></a>mbed::DigitalOut::DigitalOut(PinName)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOutC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::DigitalOut::DigitalOut(PinName) &rArr; gpio_init &rArr; gpio_set &rArr; pin_function
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_50cc0329
</UL>

<P><STRONG><a name="[2e7]"></a>mbed::DigitalOut::DigitalOut__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOutC1E7PinName), UNUSED)

<P><STRONG><a name="[f0]"></a>mbed::DigitalOut::operator =(int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOutaSEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::DigitalOut::operator =(int) &rArr; mbed::DigitalOut::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_data_thread(const void*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[8c]"></a>mbed::FileHandle::flen()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, retarget.o(i._ZN4mbed10FileHandle4flenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FileHandle::flen()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[2e8]"></a>mbed::FileHandle::~FileHandle()</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, retarget.o(i._ZN4mbed10FileHandleD2Ev), UNUSED)

<P><STRONG><a name="[8d]"></a>mbed::FileHandle::~FileHandle__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, retarget.o(i._ZN4mbed10FileHandleD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[233]"></a>mbed::SerialBase::_base_putc(int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase10_base_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_putc(int)
</UL>

<P><STRONG><a name="[78]"></a>mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::call()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
</UL>
<P><STRONG><a name="[110]"></a>mbed::SerialBase::baud(int)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBase4baudEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::SerialBase::baud(int) &rArr; serial_baud
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[237]"></a>mbed::SerialBase::SerialBase(PinName, PinName)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::SerialBase(PinName, PinName) &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[2e9]"></a>mbed::SerialBase::SerialBase__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_), UNUSED)

<P><STRONG><a name="[79]"></a>mbed::InterruptIn::_irq_handler(unsigned, gpio_irq_event)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, InterruptIn.o(i._ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::InterruptIn::_irq_handler(unsigned, gpio_irq_event)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::call()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> InterruptIn.o(i._ZN4mbed11InterruptInC1E7PinName)
</UL>
<P><STRONG><a name="[fc]"></a>mbed::InterruptIn::fall(void(*)())</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, InterruptIn.o(i._ZN4mbed11InterruptIn4fallEPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbed::InterruptIn::fall(void(*)()) &rArr; gpio_irq_set
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_set
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::attach(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_setup()
</UL>

<P><STRONG><a name="[119]"></a>mbed::InterruptIn::InterruptIn(PinName)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, InterruptIn.o(i._ZN4mbed11InterruptInC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mbed::InterruptIn::InterruptIn(PinName) &rArr; gpio_irq_init &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::FunctionPointer(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_50cc0329
</UL>

<P><STRONG><a name="[2ea]"></a>mbed::InterruptIn::InterruptIn__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, InterruptIn.o(i._ZN4mbed11InterruptInC1E7PinName), UNUSED)

<P><STRONG><a name="[3f]"></a>mbed::InterruptIn::~InterruptIn()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, InterruptIn.o(i._ZN4mbed11InterruptInD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::InterruptIn::~InterruptIn()
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> InterruptIn.o(.constdata__ZTVN4mbed11InterruptInE)
</UL>
<P><STRONG><a name="[2eb]"></a>mbed::InterruptIn::~InterruptIn__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, InterruptIn.o(i._ZN4mbed11InterruptInD1Ev), UNUSED)

<P><STRONG><a name="[235]"></a>mbed::FunctionPointer::call()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointer4callEv))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::_irq_handler(unsigned, gpio_irq_event)
</UL>

<P><STRONG><a name="[239]"></a>mbed::FunctionPointer::attach(void(*)())</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointer6attachEPFvvE))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::fall(void(*)())
</UL>

<P><STRONG><a name="[230]"></a>mbed::FunctionPointer::FunctionPointer(void(*)())</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointerC1EPFvvE))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func1&rang;
</UL>

<P><STRONG><a name="[2ec]"></a>mbed::FunctionPointer::FunctionPointer__sub_object(void(*)())</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointerC1EPFvvE), UNUSED)

<P><STRONG><a name="[e2]"></a>mbed::Timer::read()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbed::Timer::read() &rArr; mbed::Timer::read_us() &rArr; mbed::Timer::slicetime() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_us()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steer(int)
</UL>

<P><STRONG><a name="[e1]"></a>mbed::Timer::stop()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mbed::Timer::stop() &rArr; mbed::Timer::slicetime() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steer(int)
</UL>

<P><STRONG><a name="[e3]"></a>mbed::Timer::reset()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mbed::Timer::reset() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steer(int)
</UL>

<P><STRONG><a name="[e4]"></a>mbed::Timer::start()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mbed::Timer::start() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steer(int)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_50cc0329
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[115]"></a>mbed::Timer::read_ms()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer7read_msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbed::Timer::read_ms() &rArr; mbed::Timer::read_us() &rArr; mbed::Timer::slicetime() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_us()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::MbedHal::get_time_ms()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[23d]"></a>mbed::Timer::read_us()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer7read_usEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mbed::Timer::read_us() &rArr; mbed::Timer::slicetime() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read()
</UL>

<P><STRONG><a name="[23e]"></a>mbed::Timer::slicetime()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer9slicetimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mbed::Timer::slicetime() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::stop()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_us()
</UL>

<P><STRONG><a name="[11b]"></a>mbed::Timer::Timer()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5TimerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mbed::Timer::Timer() &rArr; mbed::Timer::reset() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_50cc0329
</UL>

<P><STRONG><a name="[2ed]"></a>mbed::Timer::Timer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5TimerC1Ev), UNUSED)

<P><STRONG><a name="[ec]"></a>mbed::PwmOut::pulsewidth_us(int)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main.o(i._ZN4mbed6PwmOut13pulsewidth_usEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::PwmOut::pulsewidth_us(int) &rArr; pwmout_pulsewidth_us &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_pulsewidth_us
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steer_setup()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steer(int)
</UL>

<P><STRONG><a name="[118]"></a>mbed::PwmOut::PwmOut(PinName)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(i._ZN4mbed6PwmOutC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = mbed::PwmOut::PwmOut(PinName) &rArr; pwmout_init &rArr; pinmap_pinout &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_50cc0329
</UL>

<P><STRONG><a name="[2ee]"></a>mbed::PwmOut::PwmOut__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN4mbed6PwmOutC1E7PinName), UNUSED)

<P><STRONG><a name="[8e]"></a>mbed::Serial::_putc(int)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[1c1]"></a>mbed::Serial::Serial(PinName, PinName, const char*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::MODSERIAL(PinName, PinName, const char*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::MODSERIAL(PinName, PinName, int, int, const char*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::MODSERIAL(PinName, PinName, int, const char*)
</UL>

<P><STRONG><a name="[2ef]"></a>mbed::Serial::Serial__sub_object(PinName, PinName, const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKc), UNUSED)

<P><STRONG><a name="[86]"></a>mbed::Stream::flen()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream4flenEv))
<BR>[Address Reference Count : 3]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[13a]"></a>mbed::Stream::putc(int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, Stream.o(i._ZN4mbed6Stream4putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::MbedHal::transmit_byte(unsigned char)
</UL>

<P><STRONG><a name="[13c]"></a>mbed::Stream::puts(const char*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, Stream.o(i._ZN4mbed6Stream4putsEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::puts(const char*) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::MbedHal::do_error(const char*)
</UL>

<P><STRONG><a name="[83]"></a>mbed::Stream::close()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5closeEv))
<BR>[Address Reference Count : 3]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[85]"></a>mbed::Stream::lseek(long, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5lseekEli))
<BR>[Address Reference Count : 3]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[82]"></a>mbed::Stream::write(const void*, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6Stream5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[84]"></a>mbed::Stream::isatty()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream6isattyEv))
<BR>[Address Reference Count : 3]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> modserial.o(.constdata__ZTVN3AjK9MODSERIALE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[243]"></a>mbed::Stream::Stream__sub_object(const char*)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6StreamC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[2f0]"></a>mbed::Stream::~Stream()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6StreamD2Ev), UNUSED)

<P><STRONG><a name="[8f]"></a>mbed::Stream::~Stream__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6StreamD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::~Stream__sub_object() &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::~MODSERIAL()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[24a]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
</UL>

<P><STRONG><a name="[245]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, FileBase.o(i._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[247]"></a>mbed::FileBase::FileBase(const char*, mbed::PathType)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
</UL>

<P><STRONG><a name="[2f1]"></a>mbed::FileBase::FileBase__sub_object(const char*, mbed::PathType)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE), UNUSED)

<P><STRONG><a name="[90]"></a>mbed::FileBase::~FileBase()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileBase.o(.constdata__ZTVN4mbed8FileBaseE)
</UL>
<P><STRONG><a name="[2f2]"></a>mbed::FileBase::~FileBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseD1Ev), UNUSED)

<P><STRONG><a name="[244]"></a>mbed::FileLike::FileLike__sub_object(const char*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileLike::FileLike__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[2f3]"></a>mbed::FileLike::~FileLike()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeD2Ev), UNUSED)

<P><STRONG><a name="[91]"></a>mbed::FileLike::~FileLike__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[248]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::fileSystem() &rArr; mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[249]"></a>mbed::FilePath::isFileSystem()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath12isFileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[24b]"></a>mbed::FilePath::file()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::file() &rArr; mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[250]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[24c]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[251]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[24d]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[2f4]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc), UNUSED)

<P><STRONG><a name="[43]"></a>telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::~NumericArray()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i._ZN9telemetry12NumericArrayItLj128EED1Ev))
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> main.o(.constdata__ZTVN9telemetry12NumericArrayItLj128EEE)
</UL>
<P><STRONG><a name="[2f5]"></a>telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::~NumericArray__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN9telemetry12NumericArrayItLj128EED1Ev), UNUSED)

<P><STRONG><a name="[9a]"></a>telemetry::FixedLengthTransmitPacket::~FixedLengthTransmitPacket()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, packet.o(i._ZN9telemetry25FixedLengthTransmitPacketD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::transmit_data()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::transmit_header()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> packet.o(.constdata__ZTVN9telemetry25FixedLengthTransmitPacketE)
</UL>
<P><STRONG><a name="[2f6]"></a>telemetry::FixedLengthTransmitPacket::~FixedLengthTransmitPacket__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, packet.o(i._ZN9telemetry25FixedLengthTransmitPacketD1Ev), UNUSED)

<P><STRONG><a name="[120]"></a>telemetry::Data::Data__sub_object(const char*, const char*, const char*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i._ZN9telemetry4DataC2EPKcS2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = telemetry::Data::Data__sub_object(const char*, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;float&rang;::Numeric(telemetry::Telemetry&, const char*, const char*, const char*, float)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::NumericArray(telemetry::Telemetry&, const char*, const char*, const char*, unsigned short)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_50cc0329
</UL>

<P><STRONG><a name="[41]"></a>telemetry::MbedHal::~MbedHal()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i._ZN9telemetry7MbedHalD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> telemetry-mbed-hal.o(.constdata__ZTVN9telemetry7MbedHalE)
</UL>
<P><STRONG><a name="[2f7]"></a>telemetry::MbedHal::~MbedHal__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN9telemetry7MbedHalD1Ev), UNUSED)

<P><STRONG><a name="[44]"></a>telemetry::Numeric&lang;float&rang;::~Numeric()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i._ZN9telemetry7NumericIfED1Ev))
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> main.o(.constdata__ZTVN9telemetry7NumericIfEE)
</UL>
<P><STRONG><a name="[2f8]"></a>telemetry::Numeric&lang;float&rang;::~Numeric__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN9telemetry7NumericIfED1Ev), UNUSED)

<P><STRONG><a name="[42]"></a>telemetry::Numeric&lang;unsigned&rang;::~Numeric()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i._ZN9telemetry7NumericIjED1Ev))
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> main.o(.constdata__ZTVN9telemetry7NumericIjEE)
</UL>
<P><STRONG><a name="[2f9]"></a>telemetry::Numeric&lang;unsigned&rang;::~Numeric__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN9telemetry7NumericIjED1Ev), UNUSED)

<P><STRONG><a name="[12f]"></a>telemetry::Telemetry::do_error(const char*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, telemetry.o(i._ZN9telemetry9Telemetry8do_errorEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = telemetry::Telemetry::do_error(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::transmit_data()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::add_data(telemetry::Data&)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::transmit_header()
</UL>

<P><STRONG><a name="[11f]"></a>telemetry::Telemetry::Telemetry(telemetry::HalInterface&)</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, main.o(i._ZN9telemetry9TelemetryC1ERNS_12HalInterfaceE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = telemetry::Telemetry::Telemetry(telemetry::HalInterface&) &rArr; telemetry::ReceivePacketBuffer::ReceivePacketBuffer(telemetry::HalInterface&)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::ReceivePacketBuffer::ReceivePacketBuffer(telemetry::HalInterface&)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_50cc0329
</UL>

<P><STRONG><a name="[2fa]"></a>telemetry::Telemetry::Telemetry__sub_object(telemetry::HalInterface&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN9telemetry9TelemetryC1ERNS_12HalInterfaceE), UNUSED)

<P><STRONG><a name="[1b6]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
</UL>

<P><STRONG><a name="[1b7]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread__deallocating()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::claim(std::__FILE*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::~MODSERIAL__deallocating()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[1af]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread(void(*)(const void*), void*, osPriority, unsigned, unsigned char*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::claim(std::__FILE*)
</UL>

<P><STRONG><a name="[24e]"></a>operator new(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[257]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, system_MKL25Z4.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extosc_frequency
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_atexit</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_50cc0329
</UL>

<P><STRONG><a name="[1c3]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::MODSERIAL(PinName, PinName, const char*)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::MODSERIAL(PinName, PinName, int, int, const char*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::MODSERIAL(PinName, PinName, int, const char*)
</UL>

<P><STRONG><a name="[cf]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_finalize &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_1
</UL>

<P><STRONG><a name="[8b]"></a>__cxa_pure_virtual</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 6]<UL><LI> main.o(.constdata__ZTVN9telemetry12HalInterfaceE)
<LI> packet.o(.constdata__ZTVN9telemetry14TransmitPacketE)
<LI> telemetry-data.o(.constdata__ZTVN9telemetry4DataE)
<LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[d5]"></a>__user_setup_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys.o(i.__user_setup_stackheap))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1d8]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1e1]"></a>_sys_close</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, retarget.o(i._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[20c]"></a>_sys_flen</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, retarget.o(i._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[20d]"></a>_sys_istty</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, retarget.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1e9]"></a>_sys_open</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, retarget.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[210]"></a>_sys_seek</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget.o(i._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[211]"></a>_sys_write</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, retarget.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[11d]"></a>analogin_init</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, analogin_api.o(i.analogin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = analogin_init &rArr; pinmap_pinout &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_50cc0329
</UL>

<P><STRONG><a name="[ee]"></a>analogin_read_u16</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, analogin_api.o(i.analogin_read_u16))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_data_thread(const void*)
</UL>

<P><STRONG><a name="[da]"></a>exit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, exit.o(i.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semihost_exit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_interface_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread(void(*)(const void*), void*, osPriority, unsigned, unsigned char*)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::init(int, int, PinName)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_format
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::claim(std::__FILE*)
</UL>

<P><STRONG><a name="[ea]"></a>floorf</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, floorf.o(i.floorf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floorf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steer(int)
</UL>

<P><STRONG><a name="[74]"></a>_fputc$unlocked</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[25a]"></a>gpio_dir</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpio_api.o(i.gpio_dir))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[1bd]"></a>gpio_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gpio_api.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpio_init &rArr; gpio_set &rArr; pin_function
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::isr_rx()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[7b]"></a>gpio_irqA</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio_irq_api.o(i.gpio_irqA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpio_irqA &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[7c]"></a>gpio_irqD</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio_irq_api.o(i.gpio_irqD))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpio_irqD &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[23c]"></a>gpio_irq_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio_irq_api.o(i.gpio_irq_free))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::~InterruptIn()
</UL>

<P><STRONG><a name="[23b]"></a>gpio_irq_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gpio_irq_api.o(i.gpio_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = gpio_irq_init &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
</UL>

<P><STRONG><a name="[23a]"></a>gpio_irq_set</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, gpio_irq_api.o(i.gpio_irq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::fall(void(*)())
</UL>

<P><STRONG><a name="[259]"></a>gpio_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio_api.o(i.gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_set &rArr; pin_function
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[1ac]"></a>mbed_die</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, board.o(i.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[254]"></a>mbed_interface_connected</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mbed_interface.o(i.mbed_interface_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed_interface_connected
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semihost_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[22f]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25e]"></a>pin_function</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pinmap.o(i.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
</UL>

<P><STRONG><a name="[25b]"></a>pin_mode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pinmap.o(i.pin_mode))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[266]"></a>pinmap_find_peripheral</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pinmap_common.o(i.pinmap_find_peripheral))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>

<P><STRONG><a name="[265]"></a>pinmap_merge</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = pinmap_merge &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[252]"></a>pinmap_peripheral</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = pinmap_peripheral &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_peripheral
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[253]"></a>pinmap_pinout</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_pinout))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = pinmap_pinout &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[242]"></a>pwmout_init</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, pwmout_api.o(i.pwmout_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = pwmout_init &rArr; pinmap_pinout &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_ms
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::PwmOut(PinName)
</UL>

<P><STRONG><a name="[103]"></a>pwmout_period_ms</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pwmout_api.o(i.pwmout_period_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pwmout_period_ms &rArr; pwmout_period_us &rArr; pwmout_read &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steer_setup()
</UL>

<P><STRONG><a name="[fb]"></a>pwmout_period_us</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pwmout_api.o(i.pwmout_period_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pwmout_period_us &rArr; pwmout_read &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_ms
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_setup()
</UL>

<P><STRONG><a name="[241]"></a>pwmout_pulsewidth_us</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pwmout_api.o(i.pwmout_pulsewidth_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pwmout_pulsewidth_us &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::pulsewidth_us(int)
</UL>

<P><STRONG><a name="[268]"></a>pwmout_read</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pwmout_api.o(i.pwmout_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pwmout_read &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>

<P><STRONG><a name="[f9]"></a>pwmout_write</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pwmout_api.o(i.pwmout_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pwmout_write &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed(float)
</UL>

<P><STRONG><a name="[264]"></a>semihost_connected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, semihost_api.o(i.semihost_connected))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_interface_connected
</UL>

<P><STRONG><a name="[255]"></a>semihost_exit</STRONG> (Thumb, 12 bytes, Stack size 24 bytes, semihost_api.o(i.semihost_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = semihost_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[236]"></a>serial_baud</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, serial_api.o(i.serial_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serial_baud
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[269]"></a>serial_format</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, serial_api.o(i.serial_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[232]"></a>serial_init</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, serial_api.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_format
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
</UL>

<P><STRONG><a name="[238]"></a>serial_irq_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.serial_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>

<P><STRONG><a name="[26a]"></a>serial_irq_set</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, serial_api.o(i.serial_irq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::SerialBase::attach&lang;AjK::MODSERIAL&rang;(T1*, void(T1::*)(), mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[234]"></a>serial_putc</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, serial_api.o(i.serial_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[26b]"></a>serial_writable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, serial_api.o(i.serial_writable))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>

<P><STRONG><a name="[7e]"></a>uart0_irq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, serial_api.o(i.uart0_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart0_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[7f]"></a>uart1_irq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, serial_api.o(i.uart1_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart1_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[80]"></a>uart2_irq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, serial_api.o(i.uart2_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart2_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[26e]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_clear_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[26f]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_disable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[26d]"></a>us_ticker_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, us_ticker.o(i.us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>

<P><STRONG><a name="[261]"></a>us_ticker_irq_handler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, us_ticker_api.o(i.us_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = us_ticker_irq_handler &rArr; us_ticker_set_interrupt &rArr;  us_ticker_irq_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_disable_interrupt
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_clear_interrupt
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_isr
</UL>

<P><STRONG><a name="[23f]"></a>us_ticker_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, us_ticker.o(i.us_ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
</UL>

<P><STRONG><a name="[270]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, us_ticker.o(i.us_ticker_set_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + In Cycle
<LI>Call Chain = us_ticker_set_interrupt &rArr;  us_ticker_irq_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_set
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[10e]"></a>wait</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wait_api.o(i.wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_led()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[263]"></a>wait_ms</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wait_api.o(i.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[df]"></a>wait_us</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wait_api.o(i.wait_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_data_thread(const void*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dummy_read()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>

<P><STRONG><a name="[76]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[1bb]"></a>void mbed::SerialBase::attach&lang;AjK::MODSERIAL&rang;(T1*, void(T1::*)(), mbed::SerialBase::IrqType)</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, init.o(t._ZN4mbed10SerialBase6attachIN3AjK9MODSERIALEEEvPT_MS4_FvvENS0_7IrqTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = void mbed::SerialBase::attach&lang;AjK::MODSERIAL&rang;(T1*, void(T1::*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::init(int, int, PinName)
</UL>

<P><STRONG><a name="[81]"></a>void mbed::FunctionPointer::membercaller&lang;AjK::MODSERIAL&rang;(void*, char*)</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, init.o(t._ZN4mbed15FunctionPointer12membercallerIN3AjK9MODSERIALEEEvPvPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = void mbed::FunctionPointer::membercaller&lang;AjK::MODSERIAL&rang;(void*, char*) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(t._ZN4mbed10SerialBase6attachIN3AjK9MODSERIALEEEvPT_MS4_FvvENS0_7IrqTypeE)
</UL>
<P><STRONG><a name="[94]"></a>telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::get_data_type()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(t._ZN9telemetry12NumericArrayItLj128EE13get_data_typeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry12NumericArrayItLj128EEE)
</UL>
<P><STRONG><a name="[98]"></a>telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::write_payload(telemetry::TransmitPacket&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(t._ZN9telemetry12NumericArrayItLj128EE13write_payloadERNS_14TransmitPacketE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::write_payload(telemetry::TransmitPacket&) &rArr; telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::serialize_data(unsigned short, telemetry::TransmitPacket&) &rArr; void telemetry::internal::pkt_write&lang;unsigned short&rang;(telemetry::TransmitPacket&, T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::serialize_data(unsigned short, telemetry::TransmitPacket&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry12NumericArrayItLj128EEE)
</UL>
<P><STRONG><a name="[271]"></a>telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::serialize_data(unsigned short, telemetry::TransmitPacket&)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(t._ZN9telemetry12NumericArrayItLj128EE14serialize_dataEtRNS_14TransmitPacketE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::serialize_data(unsigned short, telemetry::TransmitPacket&) &rArr; void telemetry::internal::pkt_write&lang;unsigned short&rang;(telemetry::TransmitPacket&, T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void telemetry::internal::pkt_write&lang;unsigned short&rang;(telemetry::TransmitPacket&, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::write_header_kvrs(telemetry::TransmitPacket&)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::write_payload(telemetry::TransmitPacket&)
</UL>

<P><STRONG><a name="[99]"></a>telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::set_from_packet(telemetry::ReceivePacketBuffer&)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(t._ZN9telemetry12NumericArrayItLj128EE15set_from_packetERNS_19ReceivePacketBufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::set_from_packet(telemetry::ReceivePacketBuffer&) &rArr; T1 telemetry::internal::buf_read&lang;unsigned short&rang;(telemetry::ReceivePacketBuffer&) &rArr; telemetry::ReceivePacketBuffer::read_uint16()
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::mark_data_updated(unsigned)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 telemetry::internal::buf_read&lang;unsigned short&rang;(telemetry::ReceivePacketBuffer&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry12NumericArrayItLj128EEE)
</UL>
<P><STRONG><a name="[96]"></a>telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::write_header_kvrs(telemetry::TransmitPacket&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, main.o(t._ZN9telemetry12NumericArrayItLj128EE17write_header_kvrsERNS_14TransmitPacketE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::write_header_kvrs(telemetry::TransmitPacket&) &rArr; telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::serialize_data(unsigned short, telemetry::TransmitPacket&) &rArr; void telemetry::internal::pkt_write&lang;unsigned short&rang;(telemetry::TransmitPacket&, T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::serialize_data(unsigned short, telemetry::TransmitPacket&)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char telemetry::protocol::numeric_subtype&lang;unsigned short&rang;()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Data::write_header_kvrs(telemetry::TransmitPacket&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry12NumericArrayItLj128EEE)
</UL>
<P><STRONG><a name="[97]"></a>telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::get_payload_length()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(t._ZN9telemetry12NumericArrayItLj128EE18get_payload_lengthEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry12NumericArrayItLj128EEE)
</UL>
<P><STRONG><a name="[95]"></a>telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::get_header_kvrs_length()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(t._ZN9telemetry12NumericArrayItLj128EE22get_header_kvrs_lengthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::get_header_kvrs_length() &rArr; telemetry::Data::get_header_kvrs_length() &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Data::get_header_kvrs_length()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry12NumericArrayItLj128EEE)
</UL>
<P><STRONG><a name="[122]"></a>telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::NumericArray(telemetry::Telemetry&, const char*, const char*, const char*, unsigned short)</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, main.o(t._ZN9telemetry12NumericArrayItLj128EEC1ERNS_9TelemetryEPKcS5_S5_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::NumericArray(telemetry::Telemetry&, const char*, const char*, const char*, unsigned short) &rArr; telemetry::Telemetry::add_data(telemetry::Data&) &rArr; telemetry::Telemetry::do_error(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Data::Data__sub_object(const char*, const char*, const char*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::add_data(telemetry::Data&)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_50cc0329
</UL>

<P><STRONG><a name="[2fb]"></a>telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::NumericArray__sub_object(telemetry::Telemetry&, const char*, const char*, const char*, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, main.o(t._ZN9telemetry12NumericArrayItLj128EEC1ERNS_9TelemetryEPKcS5_S5_t), UNUSED)

<P><STRONG><a name="[134]"></a>telemetry::Queue&lang;unsigned char, (unsigned)256&rang;::enqueue(const unsigned char&)</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, telemetry.o(t._ZN9telemetry5QueueIhLj256EE7enqueueERKh))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::process_received_data()
</UL>

<P><STRONG><a name="[a7]"></a>telemetry::Numeric&lang;float&rang;::get_data_type()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(t._ZN9telemetry7NumericIfE13get_data_typeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry7NumericIfEE)
</UL>
<P><STRONG><a name="[ab]"></a>telemetry::Numeric&lang;float&rang;::write_payload(telemetry::TransmitPacket&)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(t._ZN9telemetry7NumericIfE13write_payloadERNS_14TransmitPacketE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = telemetry::Numeric&lang;float&rang;::write_payload(telemetry::TransmitPacket&) &rArr; telemetry::Numeric&lang;float&rang;::serialize_data(float, telemetry::TransmitPacket&) &rArr; void telemetry::internal::pkt_write&lang;float&rang;(telemetry::TransmitPacket&, T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;float&rang;::serialize_data(float, telemetry::TransmitPacket&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry7NumericIfEE)
</UL>
<P><STRONG><a name="[274]"></a>telemetry::Numeric&lang;float&rang;::serialize_data(float, telemetry::TransmitPacket&)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(t._ZN9telemetry7NumericIfE14serialize_dataEfRNS_14TransmitPacketE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = telemetry::Numeric&lang;float&rang;::serialize_data(float, telemetry::TransmitPacket&) &rArr; void telemetry::internal::pkt_write&lang;float&rang;(telemetry::TransmitPacket&, T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void telemetry::internal::pkt_write&lang;float&rang;(telemetry::TransmitPacket&, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;float&rang;::write_header_kvrs(telemetry::TransmitPacket&)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;float&rang;::write_payload(telemetry::TransmitPacket&)
</UL>

<P><STRONG><a name="[ac]"></a>telemetry::Numeric&lang;float&rang;::set_from_packet(telemetry::ReceivePacketBuffer&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(t._ZN9telemetry7NumericIfE15set_from_packetERNS_19ReceivePacketBufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = telemetry::Numeric&lang;float&rang;::set_from_packet(telemetry::ReceivePacketBuffer&) &rArr; T1 telemetry::internal::buf_read&lang;float&rang;(telemetry::ReceivePacketBuffer&) &rArr; telemetry::ReceivePacketBuffer::read_float()
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::mark_data_updated(unsigned)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 telemetry::internal::buf_read&lang;float&rang;(telemetry::ReceivePacketBuffer&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry7NumericIfEE)
</UL>
<P><STRONG><a name="[a9]"></a>telemetry::Numeric&lang;float&rang;::write_header_kvrs(telemetry::TransmitPacket&)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, main.o(t._ZN9telemetry7NumericIfE17write_header_kvrsERNS_14TransmitPacketE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = telemetry::Numeric&lang;float&rang;::write_header_kvrs(telemetry::TransmitPacket&) &rArr; telemetry::Numeric&lang;float&rang;::serialize_data(float, telemetry::TransmitPacket&) &rArr; void telemetry::internal::pkt_write&lang;float&rang;(telemetry::TransmitPacket&, T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;float&rang;::serialize_data(float, telemetry::TransmitPacket&)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char telemetry::protocol::numeric_subtype&lang;float&rang;()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Data::write_header_kvrs(telemetry::TransmitPacket&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry7NumericIfEE)
</UL>
<P><STRONG><a name="[aa]"></a>telemetry::Numeric&lang;float&rang;::get_payload_length()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(t._ZN9telemetry7NumericIfE18get_payload_lengthEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry7NumericIfEE)
</UL>
<P><STRONG><a name="[a8]"></a>telemetry::Numeric&lang;float&rang;::get_header_kvrs_length()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(t._ZN9telemetry7NumericIfE22get_header_kvrs_lengthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = telemetry::Numeric&lang;float&rang;::get_header_kvrs_length() &rArr; telemetry::Data::get_header_kvrs_length() &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Data::get_header_kvrs_length()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry7NumericIfEE)
</UL>
<P><STRONG><a name="[123]"></a>telemetry::Numeric&lang;float&rang;::Numeric(telemetry::Telemetry&, const char*, const char*, const char*, float)</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, main.o(t._ZN9telemetry7NumericIfEC1ERNS_9TelemetryEPKcS5_S5_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = telemetry::Numeric&lang;float&rang;::Numeric(telemetry::Telemetry&, const char*, const char*, const char*, float) &rArr; telemetry::Telemetry::add_data(telemetry::Data&) &rArr; telemetry::Telemetry::do_error(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Data::Data__sub_object(const char*, const char*, const char*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::add_data(telemetry::Data&)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_50cc0329
</UL>

<P><STRONG><a name="[2fc]"></a>telemetry::Numeric&lang;float&rang;::Numeric__sub_object(telemetry::Telemetry&, const char*, const char*, const char*, float)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, main.o(t._ZN9telemetry7NumericIfEC1ERNS_9TelemetryEPKcS5_S5_f), UNUSED)

<P><STRONG><a name="[10c]"></a>telemetry::Numeric&lang;float&rang;::operator =(float)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(t._ZN9telemetry7NumericIfEaSEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = telemetry::Numeric&lang;float&rang;::operator =(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::mark_data_updated(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[ad]"></a>telemetry::Numeric&lang;unsigned&rang;::get_data_type()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(t._ZN9telemetry7NumericIjE13get_data_typeEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry7NumericIjEE)
</UL>
<P><STRONG><a name="[b1]"></a>telemetry::Numeric&lang;unsigned&rang;::write_payload(telemetry::TransmitPacket&)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(t._ZN9telemetry7NumericIjE13write_payloadERNS_14TransmitPacketE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = telemetry::Numeric&lang;unsigned&rang;::write_payload(telemetry::TransmitPacket&) &rArr; telemetry::Numeric&lang;unsigned&rang;::serialize_data(unsigned, telemetry::TransmitPacket&) &rArr; void telemetry::internal::pkt_write&lang;unsigned&rang;(telemetry::TransmitPacket&, T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;unsigned&rang;::serialize_data(unsigned, telemetry::TransmitPacket&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry7NumericIjEE)
</UL>
<P><STRONG><a name="[277]"></a>telemetry::Numeric&lang;unsigned&rang;::serialize_data(unsigned, telemetry::TransmitPacket&)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(t._ZN9telemetry7NumericIjE14serialize_dataEjRNS_14TransmitPacketE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = telemetry::Numeric&lang;unsigned&rang;::serialize_data(unsigned, telemetry::TransmitPacket&) &rArr; void telemetry::internal::pkt_write&lang;unsigned&rang;(telemetry::TransmitPacket&, T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void telemetry::internal::pkt_write&lang;unsigned&rang;(telemetry::TransmitPacket&, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;unsigned&rang;::write_header_kvrs(telemetry::TransmitPacket&)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;unsigned&rang;::write_payload(telemetry::TransmitPacket&)
</UL>

<P><STRONG><a name="[b2]"></a>telemetry::Numeric&lang;unsigned&rang;::set_from_packet(telemetry::ReceivePacketBuffer&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(t._ZN9telemetry7NumericIjE15set_from_packetERNS_19ReceivePacketBufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = telemetry::Numeric&lang;unsigned&rang;::set_from_packet(telemetry::ReceivePacketBuffer&) &rArr; T1 telemetry::internal::buf_read&lang;unsigned&rang;(telemetry::ReceivePacketBuffer&) &rArr; telemetry::ReceivePacketBuffer::read_uint32()
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::mark_data_updated(unsigned)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 telemetry::internal::buf_read&lang;unsigned&rang;(telemetry::ReceivePacketBuffer&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry7NumericIjEE)
</UL>
<P><STRONG><a name="[af]"></a>telemetry::Numeric&lang;unsigned&rang;::write_header_kvrs(telemetry::TransmitPacket&)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, main.o(t._ZN9telemetry7NumericIjE17write_header_kvrsERNS_14TransmitPacketE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = telemetry::Numeric&lang;unsigned&rang;::write_header_kvrs(telemetry::TransmitPacket&) &rArr; telemetry::Numeric&lang;unsigned&rang;::serialize_data(unsigned, telemetry::TransmitPacket&) &rArr; void telemetry::internal::pkt_write&lang;unsigned&rang;(telemetry::TransmitPacket&, T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;unsigned&rang;::serialize_data(unsigned, telemetry::TransmitPacket&)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char telemetry::protocol::numeric_subtype&lang;unsigned&rang;()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Data::write_header_kvrs(telemetry::TransmitPacket&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry7NumericIjEE)
</UL>
<P><STRONG><a name="[b0]"></a>telemetry::Numeric&lang;unsigned&rang;::get_payload_length()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(t._ZN9telemetry7NumericIjE18get_payload_lengthEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry7NumericIjEE)
</UL>
<P><STRONG><a name="[ae]"></a>telemetry::Numeric&lang;unsigned&rang;::get_header_kvrs_length()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(t._ZN9telemetry7NumericIjE22get_header_kvrs_lengthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = telemetry::Numeric&lang;unsigned&rang;::get_header_kvrs_length() &rArr; telemetry::Data::get_header_kvrs_length() &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Data::get_header_kvrs_length()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN9telemetry7NumericIjEE)
</UL>
<P><STRONG><a name="[138]"></a>telemetry::Queue&lang;unsigned char, (unsigned)256&rang;::empty() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, telemetry.o(t._ZNK9telemetry5QueueIhLj256EE5emptyEv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::read_receive()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::receive_available()
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setTunings(float, float, float)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
</UL>

<P><STRONG><a name="[27a]"></a>_dcmpeq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setTunings(float, float, float)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed(float)
</UL>

<P><STRONG><a name="[27b]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed(float)
</UL>

<P><STRONG><a name="[27c]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
</UL>

<P><STRONG><a name="[27d]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_steer(int)
</UL>

<P><STRONG><a name="[27f]"></a>_fcmpeq</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setOutputLimits(float, float)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setInputLimits(float, float)
</UL>

<P><STRONG><a name="[280]"></a>_fcmple</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[13e]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setTunings(float, float, float)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_pulsewidth_us
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setOutputLimits(float, float)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setInputLimits(float, float)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setInterval(float)
</UL>

<P><STRONG><a name="[2fd]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[140]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setOutputLimits(float, float)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setInputLimits(float, float)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setInterval(float)
</UL>

<P><STRONG><a name="[281]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::reset()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::compute()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setOutputLimits(float, float)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::setInputLimits(float, float)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_speed()
</UL>

<P><STRONG><a name="[282]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b3]"></a>__sti___8_main_cpp_50cc0329</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = __sti___8_main_cpp_50cc0329 &rArr; AjK::MODSERIAL::MODSERIAL(PinName, PinName, const char*) &rArr; mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Numeric&lang;float&rang;::Numeric(telemetry::Telemetry&, const char*, const char*, const char*, float)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::NumericArray&lang;unsigned short, (unsigned)128&rang;::NumericArray(telemetry::Telemetry&, const char*, const char*, const char*, unsigned short)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::Telemetry(telemetry::HalInterface&)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Data::Data__sub_object(const char*, const char*, const char*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::PwmOut(PinName)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telemetry::Telemetry::add_data(telemetry::Data&)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::PID(float, float, float, float)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AjK::MODSERIAL::MODSERIAL(PinName, PinName, const char*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[143]"></a>rt_ms2tick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_ms2tick
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessagePut
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[147]"></a>rt_tid2ptcb</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalGet
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalClear
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetPriority
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadSetPriority
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[15a]"></a>rt_id2obj</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreDelete
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexDelete
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCall
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerDelete
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStop
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[15c]"></a>rt_timer_insert</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[15b]"></a>rt_timer_remove</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerDelete
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStop
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[15d]"></a>isrMessagePut</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[181]"></a>rt_clr_box</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_clr_box
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolAlloc
</UL>

<P><STRONG><a name="[150]"></a>__get_CONTROL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolFree
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCAlloc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[14f]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailFree
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCAlloc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailAlloc
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolFree
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCAlloc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalGet
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalClear
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[231]"></a>init_serial()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, retarget.o(i._Z11init_serialv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[26c]"></a>uart_irq</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, serial_api.o(i.uart_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_irq
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_irq
</UL>

<P><STRONG><a name="[262]"></a>gpio_write</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board.o(i.gpio_write))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[77]"></a>&lang;Func1&rang;</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, SerialBase.o(i.<Func1>))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = &lang;Func1&rang;
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::FunctionPointer(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
</UL>
<P><STRONG><a name="[25c]"></a>handle_interrupt_in</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, gpio_irq_api.o(i.handle_interrupt_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = handle_interrupt_in
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irqD
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irqA
</UL>

<P><STRONG><a name="[256]"></a>extosc_frequency</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, us_ticker.o(i.extosc_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = extosc_frequency &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_init
</UL>

<P><STRONG><a name="[25f]"></a>lptmr_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, us_ticker.o(i.lptmr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lptmr_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extosc_frequency
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>

<P><STRONG><a name="[7d]"></a>lptmr_isr</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, us_ticker.o(i.lptmr_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lptmr_isr &rArr; us_ticker_irq_handler &rArr; us_ticker_set_interrupt &rArr;  us_ticker_irq_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker.o(i.lptmr_init)
</UL>
<P><STRONG><a name="[260]"></a>lptmr_set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, us_ticker.o(i.lptmr_set))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_isr
</UL>

<P><STRONG><a name="[1cc]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[1e8]"></a>_freopen_locked</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1f2]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1f1]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[283]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[27e]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[71]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[22c]"></a>__rt_lib_shutdown</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[214]"></a>_mutex_free</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[205]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<HR></body></html>
